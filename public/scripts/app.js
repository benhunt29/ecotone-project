var app=angular.module("ecotoneApp",["ngRoute","ngMaterial","ngMessages"]);app.config(["$mdThemingProvider","$routeProvider","$locationProvider","$httpProvider",function(t,e,r,o){r.html5Mode(!0),t.theme("default").primaryPalette("green").accentPalette("blue").warnPalette("orange"),e.when("/",{templateUrl:"/views/calculator.html",controller:"calculateCtrl"}).when("/login",{templateUrl:"/views/login.html",controller:""}).when("/register",{templateUrl:"/views/register.html",controller:"createAccountCtrl"}).when("/account",{templateUrl:"/views/account.html",controller:""}).when("/dashboard",{templateUrl:"/views/dashboard.html",controller:"projectsCtrl"}).when("/projects",{templateUrl:"/views/project.html",controller:"projectsCtrl"}).when("/about",{templateUrl:"/views/about.html"}).when("/contact",{templateUrl:"/views/contact.html",controller:""}).when("/privacy",{templateUrl:"/views/privacy.html"}).otherwise({redirectTo:"/"})}]),app.controller("calculateCtrl",["$scope","$http",function(t,e){function r(t){var e=angular.lowercase(t);return function(t){return-1!=t.primary_cat.indexOf(e)}}t.calculate={},t.list={},t.querySearch=function(e){return console.log(t.list.filter(r(e))),e?t.list.filter(r(e)):t.list},e.get("/materials").then(function(e){console.log(e),t.list=e.data,e.data.forEach(function(t){t.primary_cat=t.primary_cat.toLowerCase()})})}]),app.controller("createAccountCtrl",["$scope","$http",function(t,e){t.user={},t.processForm=function(r){console.log("Posting..."),e({method:"POST",url:"/newUser",data:t.user,dataType:"json"}).then(function(t){console.log(t),alert("Your account has been created.")})}}]),app.controller("projectsCtrl",["$scope","$http",function(t,e){e({method:"POST",url:"http://www.w3schools.com/angular/customers.php"}).then(function(e){t.names=e.records}),e({method:"GET",url:"http://www.w3schools.com/angular/customers.php"}).then(function(e){t.names=e.records})}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var r=e.split(".")[1],o=r.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e,console.log("Saved token:",t.localStorage.jwtToken)},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),r=Math.round((new Date).getTime()/1e3)<=e.exp;return r||this.logout(),r}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,r){return{request:function(t){return t.headers=t.headers||{},r.isAuthed()&&(t.headers.Authorization="Bearer "+r.getToken()),t},response:function(r){return 401===r.status&&e.path("/login"),r||t.when(r)},responseError:function(r){return 401===r.status?e.path("/login"):console.log(r),t.reject(r)}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvYXBwLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCIkcm91dGVQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwiJGh0dHBQcm92aWRlciIsImh0bWw1TW9kZSIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwid2FyblBhbGV0dGUiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsIiRzY29wZSIsIiRodHRwIiwiY3JlYXRlRmlsdGVyRm9yIiwicXVlcnkiLCJsb3dlcmNhc2VRdWVyeSIsImxvd2VyY2FzZSIsIm9iaiIsInByaW1hcnlfY2F0IiwiaW5kZXhPZiIsImNhbGN1bGF0ZSIsImxpc3QiLCJxdWVyeVNlYXJjaCIsImNvbnNvbGUiLCJsb2ciLCJmaWx0ZXIiLCJnZXQiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwiZm9yRWFjaCIsIml0ZW0iLCJ0b0xvd2VyQ2FzZSIsInVzZXIiLCJwcm9jZXNzRm9ybSIsIm1ldGhvZCIsInVybCIsImRhdGFUeXBlIiwiYWxlcnQiLCJuYW1lcyIsInJlY29yZHMiLCJzZXJ2aWNlIiwiJHdpbmRvdyIsInRoaXMiLCJwYXJzZUp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwic3BsaXQiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsInNhdmVUb2tlbiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwiZ2V0VG9rZW4iLCJpc0F1dGhlZCIsInBhcmFtcyIsIm5vdEV4cGlyZWQiLCJNYXRoIiwicm91bmQiLCJEYXRlIiwiZ2V0VGltZSIsImV4cCIsImxvZ291dCIsImdldFVzZXIiLCJmYWN0b3J5IiwiJHEiLCIkbG9jYXRpb24iLCJhdXRoU2VydmljZSIsInJlcXVlc3QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlv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UCxHQUFJYSxHQUFTZixLQUFLQyxTQUFTQyxHQUN2QmMsRUFBYUMsS0FBS0MsT0FBTSxHQUFJQyxPQUFPQyxVQUFZLE1BQVNMLEVBQU9NLEdBSW5FLE9BSEtMLElBQ0RoQixLQUFLc0IsU0FFRk4sRUFFUCxPQUFPLEdBSWZoQixLQUFLc0IsT0FBUyxpQkFDSHZCLEdBQVFZLGFBQWFDLFVBSWhDWixLQUFLdUIsUUFBVSxXQUNYLE1BQU92QixNQUFLQyxTQUFTRCxLQUFLYSxnQkFJbEMvRCxJQUFJMEUsUUFBUSxtQkFBb0IsS0FBTSxZQUFhLGNBQWUsU0FBVUMsRUFBSUMsRUFBV0MsR0FDdkYsT0FDSUMsUUFBUyxTQUFVM0UsR0FLZixNQUpBQSxHQUFPNEUsUUFBVTVFLEVBQU80RSxZQUNwQkYsRUFBWWIsYUFDWjdELEVBQU80RSxRQUFRQyxjQUFnQixVQUFZSCxFQUFZZCxZQUVwRDVELEdBRVhnQyxTQUFVLFNBQVVBLEdBT2hCLE1BTHdCLE9BQXBCQSxFQUFTOEMsUUFHVEwsRUFBVU0sS0FBSyxVQUVaL0MsR0FBWXdDLEVBQUc5RCxLQUFLc0IsSUFDNUJnRCxjQUFlLFNBQVVoRCxHQU94QixNQU53QixPQUFwQkEsRUFBUzhDLE9BQ1RMLEVBQVVNLEtBQUssVUFHZnBELFFBQVFDLElBQUlJLEdBRVR3QyxFQUFHUyxPQUFPakQiLCJmaWxlIjoic2NyaXB0cy9hcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2Vjb3RvbmVBcHAnLCBbJ25nUm91dGUnLCAnbmdNYXRlcmlhbCcsICduZ01lc3NhZ2VzJ10pO1xuXG5hcHAuY29uZmlnKFsnJG1kVGhlbWluZ1Byb3ZpZGVyJywgJyRyb3V0ZVByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJywgJyRodHRwUHJvdmlkZXInLCBmdW5jdGlvbigkbWRUaGVtaW5nUHJvdmlkZXIsICRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlciwgJGh0dHBQcm92aWRlcil7XG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgLy9zZXQgdGhlbWUgYW5kIGNvbG9yIHBhbGV0dGVcbiAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2RlZmF1bHQnKVxuICAgICAgICAucHJpbWFyeVBhbGV0dGUoJ2dyZWVuJylcbiAgICAgICAgLmFjY2VudFBhbGV0dGUoJ2JsdWUnKVxuICAgICAgICAud2FyblBhbGV0dGUgKCdvcmFuZ2UnKTtcblxuICAgIC8vcm91dGVzIGZvciB2aWV3c1xuICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy8nLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9jYWxjdWxhdG9yLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NhbGN1bGF0ZUN0cmwnXG4gICAgICAgIH0pLndoZW4oJy9sb2dpbicsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL2xvZ2luLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJydcbiAgICAgICAgfSkud2hlbignL3JlZ2lzdGVyJyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvcmVnaXN0ZXIuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnY3JlYXRlQWNjb3VudEN0cmwnXG4gICAgICAgIH0pLndoZW4oJy9hY2NvdW50JyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvYWNjb3VudC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICcnXG4gICAgICAgIH0pLndoZW4oJy9kYXNoYm9hcmQnLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9kYXNoYm9hcmQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAncHJvamVjdHNDdHJsJ1xuICAgICAgICB9KS53aGVuKCcvcHJvamVjdHMnLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9wcm9qZWN0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2plY3RzQ3RybCdcbiAgICAgICAgfSkud2hlbignL2Fib3V0JyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvYWJvdXQuaHRtbCdcbiAgICAgICAgfSkud2hlbignL2NvbnRhY3QnLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9jb250YWN0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJydcbiAgICAgICAgfSkud2hlbignL3ByaXZhY3knLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9wcml2YWN5Lmh0bWwnXG4gICAgICAgIH0pLm90aGVyd2lzZSh7XG4gICAgICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICAgICAgfSk7XG5cbiAgICAvLyRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ2F1dGhJbnRlcmNlcHRvcicpO1xufV0pO1xuXG4vLyBDYWxjdWxhdG9yIEhUTUwgLSBLYXRlICsgTWFkZWxpbmVcbi8vYXBwLmNvbnRyb2xsZXIoJ2NhbGN1bGF0ZUN0cmwnLCBbJyRzY29wZScsICckaHR0cCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHApe1xuLy8gICAgLy9NXG4vLyAgICAkc2NvcGUuY2FsY3VsYXRlID0ge307XG4vLyAgICAkc2NvcGUubGlzdCA9IHt9O1xuLy8gICAgbG9hZENhdGVnb3JpZXMoKTtcblxuICAgIC8vS1xuICAgIC8vJHNjb3BlLm1ham9yID0gW1xuICAgIC8vICAgICdDYXRlZ29yeSAxJyxcbiAgICAvLyAgICAnQ2F0ZWdvcnkgMicsXG4gICAgLy8gICAgJ0NhdGVnb3J5IDMnXG4gICAgLy9dO1xuICAgIC8vJHNjb3BlLnN1YiA9IFtcbiAgICAvLyAgICAnU3ViLWNhdGVnb3J5IDEnLFxuICAgIC8vICAgICdTdWItY2F0ZWdvcnkgMicsXG4gICAgLy8gICAgJ1N1Yi1jYXRlZ29yeSAzJ1xuICAgIC8vXTtcbiAgICAvLyRzY29wZS51bml0ID0gW1xuICAgIC8vICAgICdsYnMnLFxuICAgIC8vICAgICd0b25zJyxcbiAgICAvLyAgICAna2cnXG4gICAgLy9dO1xuXG4gICAgLy9NLy9kZXNpZ25hdGUgY29udHJvbGxlclxuICAgIGFwcC5jb250cm9sbGVyKCdjYWxjdWxhdGVDdHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwKSB7XG4gICAgICAgICRzY29wZS5jYWxjdWxhdGUgPSB7fTtcbiAgICAgICAgJHNjb3BlLmxpc3QgPSB7fTtcblxuICAgICAgIC8vIGxvYWRDYXRlZ29yaWVzKCk7XG5cbi8vbG9hZCBjYXRlZ29yaWVzIGxpc3Qgb24gcGFnZSBsb2FkXG4vLyAgICAgICAgJGh0dHAoe1xuLy8gICAgICAgICAgICAgbWV0aG9kOiAnR2V0Jyxcbi8vICAgICAgICAgICAgIHVybDogJy9tYXRlcmlhbHMnLFxuLy8gICAgICAgICAgICAgZGF0YTogcmVzcG9uc2UsXG4vLyAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4vLyAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4vLyAgICAgICAgICAgICAkc2NvcGUubGlzdCA9IHJlc3BvbnNlO1xuLy8gICAgICAgICB9KTtcblxuXG4vL2F1dG9jb21wbGV0ZSBmdW5jdGlvbmFsaXR5XG4gICAgICAgICRzY29wZS5xdWVyeVNlYXJjaD1mdW5jdGlvbihxdWVyeSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmxpc3QuZmlsdGVyKGNyZWF0ZUZpbHRlckZvcihxdWVyeSkpKTtcbiAgICAgICAgICAgIHJldHVybiBxdWVyeSA/ICRzY29wZS5saXN0LmZpbHRlcihjcmVhdGVGaWx0ZXJGb3IocXVlcnkpKSA6ICRzY29wZS5saXN0O1xuICAgICAgICB9O1xuXG4vL2xvYWQgUHJpbWFyeSBjYXRlZ29yaWVzIGxpc3Qgb24gcGFnZSBsb2FkXG4gICAgICAgICRodHRwLmdldCgnL21hdGVyaWFscycpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICRzY29wZS5saXN0ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICAgICAgIGl0ZW0ucHJpbWFyeV9jYXQgPSBpdGVtLnByaW1hcnlfY2F0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbi8vZ3JhYiB0aGUgc2VsZWN0ZWQgY2F0ZWdvcnkgYW5kIGRpc3BsYXkgdGhlIHN1YmNhdGVnb3JpZXNcbi8vIHZhciBjYXRlZ29yeSA9ICRzY29wZS5kYXRhLmNhdGVnb3J5O1xuXG5cblxuXG4vL0NyZWF0ZSBmaWx0ZXIgZnVuY3Rpb24gZm9yIGEgcXVlcnkgc3RyaW5nXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbHRlckZvcihxdWVyeSkge1xuICAgICAgICAgICAgdmFyIGxvd2VyY2FzZVF1ZXJ5ID0gYW5ndWxhci5sb3dlcmNhc2UocXVlcnkpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhxdWVyeSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZmlsdGVyRm4ob2JqKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhvYmoucHJpbWFyeV9jYXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAob2JqLnByaW1hcnlfY2F0LmluZGV4T2YobG93ZXJjYXNlUXVlcnkpICE9IC0xKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbi8vIExvZ2luIEhUTUwgLSBNYWRlbGVpbmVcbmFwcC5jb250cm9sbGVyKCdjcmVhdGVBY2NvdW50Q3RybCcsIFsnJHNjb3BlJywgJyRodHRwJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCkge1xuICAgICRzY29wZS51c2VyID0ge307XG5cbiAgICAkc2NvcGUucHJvY2Vzc0Zvcm0gPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlBvc3RpbmcuLi5cIik7XG4gICAgICAgICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJsOiAnL25ld1VzZXInLFxuICAgICAgICAgICAgZGF0YTogJHNjb3BlLnVzZXIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICBhbGVydChcIllvdXIgYWNjb3VudCBoYXMgYmVlbiBjcmVhdGVkLlwiKVxuICAgICAgICB9KVxuICAgIH07XG59XSk7XG5cbi8vIFByb2plY3QgSFRNTCAtIERhc2hib2FyZCBIVE1MIC0gS2ltXG5hcHAuY29udHJvbGxlcigncHJvamVjdHNDdHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwKSB7XG4gICAgJGh0dHAoe1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgdXJsOiAnaHR0cDovL3d3dy53M3NjaG9vbHMuY29tL2FuZ3VsYXIvY3VzdG9tZXJzLnBocCdcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAkc2NvcGUubmFtZXMgPSByZXNwb25zZS5yZWNvcmRzO1xuICAgIH0pO1xuXG4gICAgJGh0dHAoe1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICB1cmw6ICdodHRwOi8vd3d3Lnczc2Nob29scy5jb20vYW5ndWxhci9jdXN0b21lcnMucGhwJ1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICRzY29wZS5uYW1lcyA9IHJlc3BvbnNlLnJlY29yZHM7XG4gICAgfSk7XG59XSk7XG5cbi8vIFNlcnZpY2VzIGZvciBhdXRoZW50aWNhdGlvblxuYXBwLnNlcnZpY2UoJ2F1dGhTZXJ2aWNlJywgWyckd2luZG93JywgZnVuY3Rpb24gKCR3aW5kb3cpe1xuICAgIHRoaXMucGFyc2VKd3QgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgIHZhciBiYXNlNjQgPSBiYXNlNjRVcmwucmVwbGFjZSgnLScsICcrJykucmVwbGFjZSgnXycsICcvJyk7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSgkd2luZG93LmF0b2IoYmFzZTY0KSk7XG4gICAgICAgIH0gZWxzZSByZXR1cm4ge307XG4gICAgfTtcblxuICAgIHRoaXMuc2F2ZVRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuID0gdG9rZW47XG4gICAgICAgIGNvbnNvbGUubG9nKCdTYXZlZCB0b2tlbjonLCR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuKTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xuICAgIH07XG5cbiAgICB0aGlzLmlzQXV0aGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyc2VKd3QodG9rZW4pO1xuICAgICAgICAgICAgdmFyIG5vdEV4cGlyZWQgPSBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCkgPD0gcGFyYW1zLmV4cDtcbiAgICAgICAgICAgIGlmICghbm90RXhwaXJlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nb3V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm90RXhwaXJlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsZXRlICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xuICAgIH07XG5cbiAgICAvLyBleHBvc2UgdXNlciBhcyBhbiBvYmplY3RcbiAgICB0aGlzLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlSnd0KHRoaXMuZ2V0VG9rZW4oKSlcbiAgICB9O1xufV0pO1xuXG5hcHAuZmFjdG9yeSgnYXV0aEludGVyY2VwdG9yJywgWyckcScsICckbG9jYXRpb24nLCAnYXV0aFNlcnZpY2UnLCBmdW5jdGlvbiAoJHEsICRsb2NhdGlvbiwgYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuICAgICAgICAgICAgaWYgKGF1dGhTZXJ2aWNlLmlzQXV0aGVkKCkpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgYXV0aFNlcnZpY2UuZ2V0VG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9sb2dpblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcbiAgICAgICAgfSwgcmVzcG9uc2VFcnJvcjogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9sb2dpblwiKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH07XG59XSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
