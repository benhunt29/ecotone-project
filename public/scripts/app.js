var app=angular.module("ecotoneApp",["ngRoute","ngMaterial","ngMessages","validation.match"]);app.config(["$mdThemingProvider","$routeProvider","$locationProvider","$httpProvider",function(e,t,o,r){o.html5Mode(!0),e.theme("default").primaryPalette("green").accentPalette("blue-grey",{"default":"600"}).warnPalette("orange"),t.when("/",{templateUrl:"/views/calculator.html",controller:"calculateCtrl as ctrl"}).when("/login",{templateUrl:"/views/login.html",controller:"loginCtrl"}).when("/register",{templateUrl:"/views/register.html",controller:"createAccountCtrl"}).when("/admin",{templateUrl:"/views/admin.html",controller:"adminCtrl as ctrl"}).when("/account",{templateUrl:"/views/account.html",controller:""}).when("/dashboard",{templateUrl:"/views/dashboard.html",controller:"dashboardCtrl"}).when("/projects",{templateUrl:"/views/project.html",controller:"projectsCtrl as ctrl"}).when("/sources",{templateUrl:"/views/sources.html"}).otherwise({redirectTo:"/"}),r.interceptors.push("authInterceptor")}]),app.controller("editAccountCtrl",["$scope","$http","$location","$rootScope",function(e,t,o,r){e.user=r.user;e.user={};e.updateUserInfo=function(e){console.log("Posting..."),t({method:"POST",url:"/modifyUser",data:e,dataType:"json"}).then(function(e){console.log(e),o.path("/calculator"),alert("Your account information has been changed.")},function(e){console.log("error"),alert("There was a problem processing your changes. Please try again later.")})}}]),app.controller("adminCtrl",["$http","$scope","$parse",function(e,t,o){function r(){var o=t.csv.result;console.log(o),e.post("/bulk",o).then(function(e){return console.log(e),e.data.forEach(function(e){e.project_id=1}),e.data}).then(function(t){e.post("/project/calculation/",t)})["catch"](function(e){console.log(e)})}function n(t){var o=t.id;console.log(o),e.put("/suggestion/complete/"+o).then(function(e){a()})}function a(){e.get("/suggestion").then(function(e){var t=e.data;console.log(t),i.suggestions=t})}a();var i=this;i.suggestions="",i.markComplete=n,i.submitCSV=r,t.csv={content:null,header:!0,headerVisible:!0,separator:",",separatorVisible:!0,result:null,encoding:"ISO-8859-1",encodingVisible:!0};var l="";t.toPrettyJSON=function(e,t){var r=JSON.stringify(e),n=null;try{n=o(r)({})}catch(a){return l}var i=JSON.stringify(n,null,Number(t));return l=i,i}}]),app.controller("calculateCtrl",["$http","$mdDialog","$rootScope","authService","$location",function(e,t,o,r,n){function a(e){console.log("Text changed to ",e)}function i(e){void 0==e&&(f.category="",f.subcategory="",f.warmId="",f.weight="",f.item_description="",f.conversion="",f.result="")}function l(){var t={warmId:f.warmId||f.category.secondaries[0].warm_id,weight:parseFloat(f.weight)*f.conversion};e.post("/calculations",t).then(function(e){f.result=Math.floor(1e3*Math.abs(e.data))/1e3})}function c(){var t={category:f.category,subcategory:f.subcategory,warm_Id:f.warmId,weight:parseFloat(f.weight)*f.conversion,units:f.unit.name,item_description:f.item_description};console.log(t),e.post("/addToProject").then(function(e){console.log(e)})}function s(e){return e?f.list.filter(u(e)):f.list}function u(e){var t=e.toLowerCase();return function(e){return-1!=e.primary_cat.indexOf(t)}}function p(){e.post("/suggestion",f.suggestSubmission).then(function(e){t.hide()})}function d(e){t.show({templateUrl:"/views/suggest-modal.html",clickOutsideToClose:!0,controller:"calculateCtrl",controllerAs:"ctrl",locals:{material:f.searchText}})}function h(){e.post("/project",f.projectSubmission).then(function(e){t.hide()})}function g(e){t.show({templateUrl:"views/project-modal.html",clickOutsideToClose:!0,controller:"calculateCtrl",controllerAs:"ctrl"})}o.user=r.getUser(),o.user&&o.user.username&&n.path("/"),e.get("/materials").then(function(e){var t=e.data;t.forEach(function(e){e.primary_cat=e.primary_cat.toLowerCase()}),f.list=t});var f=this;f.list="",f.isDisabled=!1,f.result="",f.querySearch=s,f.selectedItemChange=i,f.searchTextChange=a,f.newSuggestion=d,f.submitSuggestion=p,f.units=[{name:"lbs",conversion:5e-4},{name:"kilos",conversion:.00110231},{name:"tons",conversion:1},{name:"metric tons",conversion:1.10231}],f.submission={email:"",material:"",notes:""},f.newCalculation=l,f.saveToProject=c,f.newProject=g,f.createProject=h}]),app.controller("createAccountCtrl",["$scope","$http","$location",function(e,t,o){e.user={},e.processForm=function(r){console.log("Posting..."),t({method:"POST",url:"/register",data:e.user,dataType:"json"}).then(function(e){console.log(e),o.path("/login"),alert("Your account has been created.")})}}]),app.directive("ngCsvImport",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{content:"=?",header:"=?",headerVisible:"=?",separator:"=?",separatorVisible:"=?",result:"=?",encoding:"=?",encodingVisible:"=?"},template:'<div><div ng-show="headerVisible"><div class="label">Header</div><input type="checkbox" ng-model="header"></div><div ng-show="encoding && encodingVisible"><div class="label">Encoding</div><span>{{encoding}}</span></div><div ng-show="separator && separatorVisible"><div class="label">Seperator</div><span><input class="separator-input" type="text" ng-change="changeSeparator" ng-model="separator"><span></div><div><input class="btn cta gray" type="file"/></div></div>',link:function(e,t){e.separatorVisible=e.separatorVisible||!1,e.headerVisible=e.headerVisible||!1,angular.element(t[0].querySelector(".separator-input")).on("keyup",function(t){if(null!=e.content){var r={csv:e.content,header:e.header,separator:t.target.value,encoding:e.encoding};e.result=o(r),e.$apply()}}),t.on("change",function(t){var r=new FileReader;if(e.filename=t.target.files[0].name,r.onload=function(t){e.$apply(function(){var r={csv:t.target.result.replace(/\r\n|\r/g,"\n"),header:e.header,separator:e.separator};e.content=r.csv,e.result=o(r),e.result.filename=e.filename})},"file"!==t.target.type||null==t.target.files&&null==t.srcElement.files){if(null!=e.content){var n={csv:e.content,header:!e.header,separator:e.separator};e.result=o(n)}}else r.readAsText((t.srcElement||t.target).files[0],e.encoding)});var o=function(e){var t=e.csv.split("\n"),o=[],r=0,n=t[0].split(e.separator).length,a=[];e.header&&(a=t[0].split(e.separator),r=1);for(var i=r;i<t.length;i++){var l={},c=t[i].split(new RegExp(e.separator+'(?![^"]*"(?:(?:[^"]*"){2})*[^"]*$)'));if(c.length===n){if(e.header)for(var s=0;s<a.length;s++)l[a[s]]=c[s];else for(var u=0;u<c.length;u++)l[u]=c[u];o.push(l)}}return o}}}}),app.controller("dashboardCtrl",["$mdDialog","$rootScope","$scope","$http",function(e,t,o,r){var n=t.user;r.get("/project/"+n.id).then(function(e){o.projectList=e.data}),o.showDelete=function(t){console.log("CLICK");var r=e.confirm().title("Are you sure you want to delete your project?").content("This is permanent.").ariaLabel("Delete project permanently").ok("Delete").cancel("Cancel").targetEvent(t);e.show(r).then(function(){o.alert="Your project has been deleted."},function(){o.alert="Your project has not been deleted."})}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(e,t,o,r,n){e.login=function(){t({method:"POST",url:"/login",data:e.form}).then(function(e){o.saveToken(e.data.token),n.user=o.getUser(),r.path("/")})}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location","$http",function(e,t,o,r,n){o.user=e.getUser(),o.user&&o.user.username&&r.path("/"),t.logout=function(){e.logout(),o.user=e.getUser(),r.path("/")}}]),app.controller("projectsCtrl",["$mdDialog","$scope","$rootScope","$http",function(e,t,o,r){function n(e){return e?s.projectList.filter(a(e)):s.projectList}function a(e){var t=e.toLowerCase();return function(e){return-1!=e.project_name.indexOf(t)}}function i(e){console.log("Text changed to ",e)}function l(e){void 0==e&&(s.project_name="",s.project_description="")}function c(){console.log("Deleting...",s.project_id)}var s=this;s.projectList=[{id:21,project_name:"ben's house",project_description:"Remodel",created_at:"2015-10-14T16:42:40.896Z",updated_at:"2015-10-14T16:42:40.901Z",user_id:4,category:"wood",sub_category:"oak",units:"lbs",weight:10,co2_offset:.03,project_id:6,item_description:"porch spindles"},{id:202,project_name:"james' house",project_description:"Teardown",created_at:"2014-10-14T16:42:40.896Z",updated_at:"2014-10-14T16:42:40.901Z",user_id:24,category:"asphalt shingles",sub_category:"null",units:"lbs",weight:100,co2_offset:.303,project_id:6,item_description:"roof shingles"},{id:2112,project_name:"kim's barn",project_description:"Remodel",created_at:"2013-10-14T16:42:40.896Z",updated_at:"2013-10-14T16:42:40.901Z",user_id:14,category:"wood flooring",sub_category:"pine",units:"lbs",weight:500,co2_offset:3.03,project_id:6,item_description:"barn wood"}],s.result="",s.querySearch=n,s.selectedItemChange=l,s.searchTextChange=i,s.projectTotal=0,s.deleteProjectItem=c,s.id=0,console.log(s.projectList),t.showDelete=function(o){console.log("CLICK");var r=e.confirm().title("Are you sure you want to delete this item?").content("This will be permanent.").ariaLabel("Delete item permanently").ok("Delete").cancel("Cancel").targetEvent(o);e.show(r).then(function(){t.alert="Your item has been deleted."},function(){t.alert="Your item has not been deleted."})}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var o=t.split(".")[1],r=o.replace("-","+").replace("_","/");return JSON.parse(e.atob(r))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t,console.log("Saved token:",e.localStorage.jwtToken)},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),o=Math.round((new Date).getTime()/1e3)<=t.exp;return o||this.logout(),o}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,o){return{request:function(e){return e.headers=e.headers||{},o.isAuthed()&&(e.headers.Authorization="Bearer "+o.getToken()),e},response:function(o){return 401===o.status&&t.path("/login"),o||e.when(o)},responseError:function(o){return 401===o.status?t.path("/login"):console.log(o),e.reject(o)}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJzY3JpcHRzL2FjY291bnRDdHJsLmpzIiwic2NyaXB0cy9hZG1pbkN0cmwuanMiLCJzY3JpcHRzL2NhbGN1bGF0ZUN0cmwuanMiLCJzY3JpcHRzL2NyZWF0ZUFjY291bnRDdHJsLmpzIiwic2NyaXB0cy9jc3ZJbXBvcnQuanMiLCJzY3JpcHRzL2Rhc2hib2FyZEN0cmwuanMiLCJzY3JpcHRzL2xvZ2luQ3RybC5qcyIsInNjcmlwdHMvbmF2Q3RybC5qcyIsInNjcmlwdHMvcHJvamVjdHNDdHJsLmpzIiwic2NyaXB0cy9zZXJ2aWNlcy5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIiRodHRwUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiYWNjZW50UGFsZXR0ZSIsImRlZmF1bHQiLCJ3YXJuUGFsZXR0ZSIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsIiRzY29wZSIsIiRodHRwIiwiJGxvY2F0aW9uIiwiJHJvb3RTY29wZSIsInVzZXIiLCJ1cGRhdGVVc2VySW5mbyIsImNvbnNvbGUiLCJsb2ciLCJtZXRob2QiLCJ1cmwiLCJkYXRhIiwiZGF0YVR5cGUiLCJ0aGVuIiwicmVzcG9uc2UiLCJwYXRoIiwiYWxlcnQiLCJlcnJvciIsIiRwYXJzZSIsInN1Ym1pdENTViIsImNzdk9iamVjdCIsImNzdiIsInJlc3VsdCIsInBvc3QiLCJyZXMiLCJmb3JFYWNoIiwiaXRlbSIsInByb2plY3RfaWQiLCJwcm9qZWN0cyIsImVyciIsIm1hcmtDb21wbGV0ZSIsInN1Z2dlc3Rpb24iLCJpZCIsInB1dCIsImluaXQiLCJnZXQiLCJzdWdnZXN0aW9ucyIsInNlbGYiLCJ0aGlzIiwiY29udGVudCIsImhlYWRlciIsImhlYWRlclZpc2libGUiLCJzZXBhcmF0b3IiLCJzZXBhcmF0b3JWaXNpYmxlIiwiZW5jb2RpbmciLCJlbmNvZGluZ1Zpc2libGUiLCJfbGFzdEdvb2RSZXN1bHQiLCJ0b1ByZXR0eUpTT04iLCJqc29uIiwidGFiV2lkdGgiLCJvYmpTdHIiLCJKU09OIiwic3RyaW5naWZ5Iiwib2JqIiwiZSIsIk51bWJlciIsIiRtZERpYWxvZyIsImF1dGhTZXJ2aWNlIiwic2VhcmNoVGV4dENoYW5nZSIsInRleHQiLCJzZWxlY3RlZEl0ZW1DaGFuZ2UiLCJ1bmRlZmluZWQiLCJjYXRlZ29yeSIsInN1YmNhdGVnb3J5Iiwid2FybUlkIiwid2VpZ2h0IiwiaXRlbV9kZXNjcmlwdGlvbiIsImNvbnZlcnNpb24iLCJuZXdDYWxjdWxhdGlvbiIsImNhbGN1bGF0ZSIsInNlY29uZGFyaWVzIiwid2FybV9pZCIsInBhcnNlRmxvYXQiLCJNYXRoIiwiZmxvb3IiLCJhYnMiLCJzYXZlVG9Qcm9qZWN0IiwibGluZUl0ZW0iLCJ3YXJtX0lkIiwidW5pdHMiLCJ1bml0IiwibmFtZSIsInF1ZXJ5U2VhcmNoIiwicXVlcnkiLCJsaXN0IiwiZmlsdGVyIiwiY3JlYXRlRmlsdGVyRm9yIiwibG93ZXJjYXNlUXVlcnkiLCJ0b0xvd2VyQ2FzZSIsInByaW1hcnlfY2F0IiwiaW5kZXhPZiIsInN1Ym1pdFN1Z2dlc3Rpb24iLCJzdWdnZXN0U3VibWlzc2lvbiIsImhpZGUiLCJuZXdTdWdnZXN0aW9uIiwic2hvdyIsImNsaWNrT3V0c2lkZVRvQ2xvc2UiLCJjb250cm9sbGVyQXMiLCJsb2NhbHMiLCJtYXRlcmlhbCIsInNlYXJjaFRleHQiLCJjcmVhdGVQcm9qZWN0IiwicHJvamVjdFN1Ym1pc3Npb24iLCJuZXdQcm9qZWN0IiwiZ2V0VXNlciIsInVzZXJuYW1lIiwiaXNEaXNhYmxlZCIsInN1Ym1pc3Npb24iLCJlbWFpbCIsIm5vdGVzIiwicHJvY2Vzc0Zvcm0iLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInRyYW5zY2x1ZGUiLCJyZXBsYWNlIiwic2NvcGUiLCJ0ZW1wbGF0ZSIsImxpbmsiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIm9uIiwidGFyZ2V0IiwidmFsdWUiLCJjc3ZUb0pTT04iLCIkYXBwbHkiLCJvbkNoYW5nZUV2ZW50IiwicmVhZGVyIiwiRmlsZVJlYWRlciIsImZpbGVuYW1lIiwiZmlsZXMiLCJvbmxvYWQiLCJvbkxvYWRFdmVudCIsInR5cGUiLCJzcmNFbGVtZW50IiwicmVhZEFzVGV4dCIsImxpbmVzIiwic3BsaXQiLCJzdGFydCIsImNvbHVtbkNvdW50IiwibGVuZ3RoIiwiaGVhZGVycyIsImkiLCJjdXJyZW50bGluZSIsIlJlZ0V4cCIsImoiLCJrIiwicHJvamVjdExpc3QiLCJzaG93RGVsZXRlIiwiZXYiLCJjb25maXJtIiwidGl0bGUiLCJhcmlhTGFiZWwiLCJvayIsImNhbmNlbCIsInRhcmdldEV2ZW50IiwibG9naW4iLCJmb3JtIiwic2F2ZVRva2VuIiwidG9rZW4iLCJsb2dvdXQiLCJwcm9qZWN0X25hbWUiLCJwcm9qZWN0X2Rlc2NyaXB0aW9uIiwiZGVsZXRlUHJvamVjdEl0ZW0iLCJjcmVhdGVkX2F0IiwidXBkYXRlZF9hdCIsInVzZXJfaWQiLCJzdWJfY2F0ZWdvcnkiLCJjbzJfb2Zmc2V0IiwicHJvamVjdFRvdGFsIiwic2VydmljZSIsIiR3aW5kb3ciLCJwYXJzZUp3dCIsImJhc2U2NFVybCIsImJhc2U2NCIsInBhcnNlIiwiYXRvYiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwiZ2V0VG9rZW4iLCJpc0F1dGhlZCIsInBhcmFtcyIsIm5vdEV4cGlyZWQiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiZXhwIiwiZmFjdG9yeSIsIiRxIiwicmVxdWVzdCIsIkF1dGhvcml6YXRpb24iLCJzdGF0dXMiLCJyZXNwb25zZUVycm9yIiwicmVqZWN0Il0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLGNBQUEsVUFBQSxhQUFBLGFBQUEsb0JB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S0FBQXlILE9BQUEsaUJBQ0FXLEdBQUFNLGFBQUFDLFVBSUEzSSxLQUFBa0UsUUFBQSxXQUNBLE1BQUFsRSxNQUFBcUksU0FBQXJJLEtBQUE0SSxnQkFJQXRNLElBQUE4TSxRQUFBLG1CQUFBLEtBQUEsWUFBQSxjQUFBLFNBQUFDLEVBQUF4TCxFQUFBc0QsR0FDQSxPQUNBbUksUUFBQSxTQUFBN00sR0FLQSxNQUpBQSxHQUFBNkosUUFBQTdKLEVBQUE2SixZQUNBbkYsRUFBQTBILGFBQ0FwTSxFQUFBNkosUUFBQWlELGNBQUEsVUFBQXBJLEVBQUF5SCxZQUVBbk0sR0FFQStCLFNBQUEsU0FBQUEsR0FPQSxNQUxBLE9BQUFBLEVBQUFnTCxRQUdBM0wsRUFBQVksS0FBQSxVQUVBRCxHQUFBNkssRUFBQWpNLEtBQUFvQixJQUNBaUwsY0FBQSxTQUFBakwsR0FPQSxNQU5BLE9BQUFBLEVBQUFnTCxPQUNBM0wsRUFBQVksS0FBQSxVQUdBUixRQUFBQyxJQUFBTSxHQUVBNkssRUFBQUssT0FBQWxMIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiAgICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2Vjb3RvbmVBcHAnLCBbJ25nUm91dGUnLCAnbmdNYXRlcmlhbCcsICduZ01lc3NhZ2VzJywgJ3ZhbGlkYXRpb24ubWF0Y2gnXSk7XG5cbmFwcC5jb25maWcoWyckbWRUaGVtaW5nUHJvdmlkZXInLCAnJHJvdXRlUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInLCAnJGh0dHBQcm92aWRlcicsIGZ1bmN0aW9uKCRtZFRoZW1pbmdQcm92aWRlciwgJHJvdXRlUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkaHR0cFByb3ZpZGVyKXtcbiAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG5cbiAgICAvL3NldCB0aGVtZSBhbmQgY29sb3IgcGFsZXR0ZVxuICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpXG4gICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgnZ3JlZW4nKVxuICAgICAgICAuYWNjZW50UGFsZXR0ZSgnYmx1ZS1ncmV5JywgeydkZWZhdWx0JzonNjAwJ30pXG4gICAgICAgIC53YXJuUGFsZXR0ZSAoJ29yYW5nZScpO1xuXG4gICAgLy9yb3V0ZXMgZm9yIHZpZXdzXG4gICAgJHJvdXRlUHJvdmlkZXIud2hlbignLycsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL2NhbGN1bGF0b3IuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnY2FsY3VsYXRlQ3RybCBhcyBjdHJsJ1xuICAgICAgICB9KS53aGVuKCcvbG9naW4nLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9sb2dpbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkN0cmwnXG4gICAgICAgIH0pLndoZW4oJy9yZWdpc3RlcicsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL3JlZ2lzdGVyLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NyZWF0ZUFjY291bnRDdHJsJ1xuICAgICAgICB9KS53aGVuKCcvYWRtaW4nLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9hZG1pbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhZG1pbkN0cmwgYXMgY3RybCdcblxuICAgICAgICB9KS53aGVuKCcvYWNjb3VudCcsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL2FjY291bnQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnJ1xuICAgICAgICB9KS53aGVuKCcvZGFzaGJvYXJkJyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvZGFzaGJvYXJkLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2Rhc2hib2FyZEN0cmwnXG4gICAgICAgIH0pLndoZW4oJy9wcm9qZWN0cycsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL3Byb2plY3QuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAncHJvamVjdHNDdHJsIGFzIGN0cmwnXG4gICAgICAgIH0pLndoZW4oJy9zb3VyY2VzJyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3Mvc291cmNlcy5odG1sJ1xuICAgICAgICB9KS5vdGhlcndpc2Uoe1xuICAgICAgICAgICAgcmVkaXJlY3RUbzogJy8nXG4gICAgICAgIH0pO1xuXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnYXV0aEludGVyY2VwdG9yJyk7XG59XSk7IiwiXG4vLyBFZGl0IGFjY291bnQgaW5mbyBIVE1MIC0gS2ltXG5hcHAuY29udHJvbGxlcignZWRpdEFjY291bnRDdHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9jYXRpb24sICRyb290U2NvcGUpIHtcbiAgICAkc2NvcGUudXNlciA9ICRyb290U2NvcGUudXNlcjtcbiAgICB2YXIgaW5mb1RvVXBkYXRlID1cbiAgICAkc2NvcGUudXNlciA9IHt9O1xuXG4gICAgJHNjb3BlLnVwZGF0ZVVzZXJJbmZvID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJQb3N0aW5nLi4uXCIpO1xuICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogJy9tb2RpZnlVc2VyJyxcbiAgICAgICAgICAgIGRhdGE6IHVzZXIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2NhbGN1bGF0b3InKTtcbiAgICAgICAgICAgIGFsZXJ0KFwiWW91ciBhY2NvdW50IGluZm9ybWF0aW9uIGhhcyBiZWVuIGNoYW5nZWQuXCIpXG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicpO1xuICAgICAgICAgICAgYWxlcnQoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHByb2Nlc3NpbmcgeW91ciBjaGFuZ2VzLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLlwiKVxuICAgICAgICB9KTtcbiAgICB9O1xufV0pOyIsIi8qKlxuICogQURNSU5cbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ2FkbWluQ3RybCcsIFsnJGh0dHAnLCAnJHNjb3BlJywnJHBhcnNlJywgZnVuY3Rpb24oICRodHRwLCAkc2NvcGUsICRwYXJzZSApe1xuICAgIC8vIElOSVRcbiAgICBpbml0KCk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5zdWdnZXN0aW9ucyA9ICcnO1xuICAgIHNlbGYubWFya0NvbXBsZXRlID0gbWFya0NvbXBsZXRlO1xuICAgIHNlbGYuc3VibWl0Q1NWID0gc3VibWl0Q1NWO1xuXG4gICAgZnVuY3Rpb24gc3VibWl0Q1NWKCApe1xuICAgICAgICB2YXIgY3N2T2JqZWN0ID0gJHNjb3BlLmNzdi5yZXN1bHQ7XG4gICAgICAgIGNvbnNvbGUubG9nKGNzdk9iamVjdCk7XG5cbiAgICAgICAgJGh0dHAucG9zdCgnL2J1bGsnLCBjc3ZPYmplY3QpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiggcmVzICl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICAgICAgICAgIHJlcy5kYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ucHJvamVjdF9pZCA9IDE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzLmRhdGF9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oIHByb2plY3RzICkge1xuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9wcm9qZWN0L2NhbGN1bGF0aW9uLycsIHByb2plY3RzKVxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXJrQ29tcGxldGUoIHN1Z2dlc3Rpb24gKSB7XG4gICAgICAgIHZhciBpZCA9IHN1Z2dlc3Rpb24uaWQ7XG4gICAgICAgIGNvbnNvbGUubG9nKGlkKTtcbiAgICAgICAgJGh0dHAucHV0KCcvc3VnZ2VzdGlvbi9jb21wbGV0ZS8nICsgaWQpLnRoZW4oZnVuY3Rpb24oIHJlcyApIHtcbiAgICAgICAgICAgIGluaXQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgJGh0dHAuZ2V0KCcvc3VnZ2VzdGlvbicpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gcmVzLmRhdGE7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzdWdnZXN0aW9ucyk7XG4gICAgICAgICAgICBzZWxmLnN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnM7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5jc3YgPSB7XG4gICAgICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgaGVhZGVyVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgc2VwYXJhdG9yOiAnLCcsXG4gICAgICAgIHNlcGFyYXRvclZpc2libGU6IHRydWUsXG4gICAgICAgIHJlc3VsdDogbnVsbCxcbiAgICAgICAgZW5jb2Rpbmc6ICdJU08tODg1OS0xJyxcbiAgICAgICAgZW5jb2RpbmdWaXNpYmxlOiB0cnVlLFxuICAgIH07XG5cbiAgICB2YXIgX2xhc3RHb29kUmVzdWx0ID0gJyc7XG4gICAgJHNjb3BlLnRvUHJldHR5SlNPTiA9IGZ1bmN0aW9uIChqc29uLCB0YWJXaWR0aCkge1xuICAgICAgICB2YXIgb2JqU3RyID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG4gICAgICAgIHZhciBvYmogPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2JqID0gJHBhcnNlKG9ialN0cikoe30pO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gZWF0ICRwYXJzZSBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIF9sYXN0R29vZFJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHQgPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIE51bWJlcih0YWJXaWR0aCkpO1xuICAgICAgICBfbGFzdEdvb2RSZXN1bHQgPSByZXN1bHQ7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG59XSk7IiwiYXBwLmNvbnRyb2xsZXIoJ2NhbGN1bGF0ZUN0cmwnLCBbJyRodHRwJywgJyRtZERpYWxvZycsICckcm9vdFNjb3BlJywgJ2F1dGhTZXJ2aWNlJywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uKCAkaHR0cCwgJG1kRGlhbG9nLCAkcm9vdFNjb3BlLCBhdXRoU2VydmljZSwgJGxvY2F0aW9uICkge1xuXG4gICAgLy8gQ2hlY2sgdXNlclxuICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcblxuICAgIGlmKCRyb290U2NvcGUudXNlciAmJiAkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpe1xuICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xuICAgIH1cblxuICAgIC8vIElOSVRcbiAgICAkaHR0cC5nZXQoJy9tYXRlcmlhbHMnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBsaXN0ID0gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICBsaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICBpdGVtLnByaW1hcnlfY2F0ID0gaXRlbS5wcmltYXJ5X2NhdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgLy8gL2l0ZW0ucHJpbWFyeV9jYXQgPSBpdGVtLnByaW1hcnlfY2F0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgaXRlbS5wcmltYXJ5X2NhdC5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmxpc3QgPSBsaXN0O1xuXG4gICAgfSk7XG5cbiAgICAvLyBTZWxmIGRlY1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHNlbGYubGlzdCA9ICcnO1xuICAgIHNlbGYuaXNEaXNhYmxlZCA9IGZhbHNlO1xuICAgIHNlbGYucmVzdWx0ID0gJyc7XG4gICAgc2VsZi5xdWVyeVNlYXJjaCA9IHF1ZXJ5U2VhcmNoO1xuICAgIHNlbGYuc2VsZWN0ZWRJdGVtQ2hhbmdlID0gc2VsZWN0ZWRJdGVtQ2hhbmdlO1xuICAgIHNlbGYuc2VhcmNoVGV4dENoYW5nZSAgID0gc2VhcmNoVGV4dENoYW5nZTtcbiAgICBzZWxmLm5ld1N1Z2dlc3Rpb24gPSBuZXdTdWdnZXN0aW9uO1xuICAgIHNlbGYuc3VibWl0U3VnZ2VzdGlvbiA9IHN1Ym1pdFN1Z2dlc3Rpb247XG4gICAgc2VsZi51bml0cyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2xicycsXG4gICAgICAgICAgICBjb252ZXJzaW9uOiAwLjAwMDVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2tpbG9zJyxcbiAgICAgICAgICAgIGNvbnZlcnNpb246IDAuMDAxMTAyMzFcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ3RvbnMnLFxuICAgICAgICAgICAgY29udmVyc2lvbjogMVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnbWV0cmljIHRvbnMnLFxuICAgICAgICAgICAgY29udmVyc2lvbjogMS4xMDIzMVxuICAgICAgICB9XG4gICAgXTtcbiAgICBzZWxmLnN1Ym1pc3Npb24gPSB7XG4gICAgICAgIGVtYWlsOiAnJyxcbiAgICAgICAgbWF0ZXJpYWw6ICcnLFxuICAgICAgICBub3RlczogJydcbiAgICB9O1xuICAgIHNlbGYubmV3Q2FsY3VsYXRpb24gPSBuZXdDYWxjdWxhdGlvbjtcbiAgICBzZWxmLnNhdmVUb1Byb2plY3QgPSBzYXZlVG9Qcm9qZWN0O1xuICAgIHNlbGYubmV3UHJvamVjdCA9IG5ld1Byb2plY3Q7XG4gICAgc2VsZi5jcmVhdGVQcm9qZWN0ID0gY3JlYXRlUHJvamVjdDtcblxuXG4gICAgZnVuY3Rpb24gc2VhcmNoVGV4dENoYW5nZSh0ZXh0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdUZXh0IGNoYW5nZWQgdG8gJywgdGV4dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VsZWN0ZWRJdGVtQ2hhbmdlKGl0ZW0pIHtcbiAgICAgICAgaWYgKCBpdGVtID09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHNlbGYuY2F0ZWdvcnkgPSAnJztcbiAgICAgICAgICAgIHNlbGYuc3ViY2F0ZWdvcnkgPSAnJztcbiAgICAgICAgICAgIHNlbGYud2FybUlkID0gJyc7XG4gICAgICAgICAgICBzZWxmLndlaWdodCA9ICcnO1xuICAgICAgICAgICAgc2VsZi5pdGVtX2Rlc2NyaXB0aW9uID0gJyc7XG4gICAgICAgICAgICBzZWxmLmNvbnZlcnNpb24gPSAnJztcbiAgICAgICAgICAgIHNlbGYucmVzdWx0ID0gJyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdDYWxjdWxhdGlvbigpIHtcblxuICAgICAgICB2YXIgY2FsY3VsYXRlID0ge1xuICAgICAgICAgICAgd2FybUlkOiBzZWxmLndhcm1JZCB8fCBzZWxmLmNhdGVnb3J5LnNlY29uZGFyaWVzWzBdLndhcm1faWQsXG4gICAgICAgICAgICB3ZWlnaHQ6IHBhcnNlRmxvYXQoc2VsZi53ZWlnaHQpICogc2VsZi5jb252ZXJzaW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgJGh0dHAucG9zdCgnL2NhbGN1bGF0aW9ucycsIGNhbGN1bGF0ZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgc2VsZi5yZXN1bHQgPSBNYXRoLmZsb29yKE1hdGguYWJzKHJlc3BvbnNlLmRhdGEpICogMTAwMCkgLyAxMDAwO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzYXZlVG9Qcm9qZWN0KCl7XG4gICAgICAgIHZhciBsaW5lSXRlbSA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBzZWxmLmNhdGVnb3J5LFxuICAgICAgICAgICAgc3ViY2F0ZWdvcnk6IHNlbGYuc3ViY2F0ZWdvcnksXG4gICAgICAgICAgICB3YXJtX0lkOiBzZWxmLndhcm1JZCxcbiAgICAgICAgICAgIHdlaWdodDogcGFyc2VGbG9hdChzZWxmLndlaWdodCkqc2VsZi5jb252ZXJzaW9uLFxuICAgICAgICAgICAgdW5pdHM6IHNlbGYudW5pdC5uYW1lLFxuICAgICAgICAgICAgaXRlbV9kZXNjcmlwdGlvbjogc2VsZi5pdGVtX2Rlc2NyaXB0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGNvbnNvbGUubG9nKGxpbmVJdGVtKTtcbiAgICAgICAgJGh0dHAucG9zdCgnL2FkZFRvUHJvamVjdCcpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcXVlcnlTZWFyY2gocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5ID8gc2VsZi5saXN0LmZpbHRlcihjcmVhdGVGaWx0ZXJGb3IocXVlcnkpKSA6IHNlbGYubGlzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGaWx0ZXJGb3IocXVlcnkpIHtcbiAgICAgICAgdmFyIGxvd2VyY2FzZVF1ZXJ5ID0gcXVlcnkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgLy9xdWVyeS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHF1ZXJ5LnNsaWNlKDEpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZmlsdGVyRm4ob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gKG9iai5wcmltYXJ5X2NhdC5pbmRleE9mKGxvd2VyY2FzZVF1ZXJ5KSAhPSAtMSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3VibWl0U3VnZ2VzdGlvbigpe1xuICAgICAgICAkaHR0cC5wb3N0KCcvc3VnZ2VzdGlvbicsIHNlbGYuc3VnZ2VzdFN1Ym1pc3Npb24pLnRoZW4oZnVuY3Rpb24oIHJlcyApe1xuICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3U3VnZ2VzdGlvbiggc3VnZ2VzdGlvbiApe1xuXG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL3N1Z2dlc3QtbW9kYWwuaHRtbCcsXG4gICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NhbGN1bGF0ZUN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY3RybCcsXG4gICAgICAgICAgICBsb2NhbHM6IHttYXRlcmlhbDogc2VsZi5zZWFyY2hUZXh0fVxuICAgICAgICB9KVxuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUHJvamVjdCgpIHtcbiAgICAgICAgJGh0dHAucG9zdCgnL3Byb2plY3QnLCBzZWxmLnByb2plY3RTdWJtaXNzaW9uKS50aGVuKGZ1bmN0aW9uKHJlcyl7XG4gICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld1Byb2plY3QoIG5ld1Byb2plY3QgKXtcblxuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3Byb2plY3QtbW9kYWwuaHRtbCcsXG4gICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NhbGN1bGF0ZUN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY3RybCdcbiAgICAgICAgfSlcblxuICAgIH1cblxufV0pOyIsIi8vIFJlZ2lzdGVyIEhUTUwgLSBNYWRlbGluZVxuYXBwLmNvbnRyb2xsZXIoJ2NyZWF0ZUFjY291bnRDdHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uKSB7XG4gICAgJHNjb3BlLnVzZXIgPSB7fTtcblxuICAgICRzY29wZS5wcm9jZXNzRm9ybSA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUG9zdGluZy4uLlwiKTtcbiAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6ICcvcmVnaXN0ZXInLFxuICAgICAgICAgICAgZGF0YTogJHNjb3BlLnVzZXIsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG4gICAgICAgICAgICBhbGVydChcIllvdXIgYWNjb3VudCBoYXMgYmVlbiBjcmVhdGVkLlwiKVxuICAgICAgICB9KVxuICAgIH07XG59XSk7IiwiYXBwLmRpcmVjdGl2ZSgnbmdDc3ZJbXBvcnQnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzY29wZTp7XG4gICAgICAgICAgICBjb250ZW50Oic9PycsXG4gICAgICAgICAgICBoZWFkZXI6ICc9PycsXG4gICAgICAgICAgICBoZWFkZXJWaXNpYmxlOiAnPT8nLFxuICAgICAgICAgICAgc2VwYXJhdG9yOiAnPT8nLFxuICAgICAgICAgICAgc2VwYXJhdG9yVmlzaWJsZTogJz0/JyxcbiAgICAgICAgICAgIHJlc3VsdDogJz0/JyxcbiAgICAgICAgICAgIGVuY29kaW5nOiAnPT8nLFxuICAgICAgICAgICAgZW5jb2RpbmdWaXNpYmxlOiAnPT8nXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlOiAnPGRpdj48ZGl2IG5nLXNob3c9XCJoZWFkZXJWaXNpYmxlXCI+PGRpdiBjbGFzcz1cImxhYmVsXCI+SGVhZGVyPC9kaXY+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiaGVhZGVyXCI+PC9kaXY+JytcbiAgICAgICAgJzxkaXYgbmctc2hvdz1cImVuY29kaW5nICYmIGVuY29kaW5nVmlzaWJsZVwiPjxkaXYgY2xhc3M9XCJsYWJlbFwiPkVuY29kaW5nPC9kaXY+PHNwYW4+e3tlbmNvZGluZ319PC9zcGFuPjwvZGl2PicrXG4gICAgICAgICc8ZGl2IG5nLXNob3c9XCJzZXBhcmF0b3IgJiYgc2VwYXJhdG9yVmlzaWJsZVwiPjxkaXYgY2xhc3M9XCJsYWJlbFwiPlNlcGVyYXRvcjwvZGl2PjxzcGFuPjxpbnB1dCBjbGFzcz1cInNlcGFyYXRvci1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgbmctY2hhbmdlPVwiY2hhbmdlU2VwYXJhdG9yXCIgbmctbW9kZWw9XCJzZXBhcmF0b3JcIj48c3Bhbj48L2Rpdj4nK1xuICAgICAgICAnPGRpdj48aW5wdXQgY2xhc3M9XCJidG4gY3RhIGdyYXlcIiB0eXBlPVwiZmlsZVwiLz48L2Rpdj48L2Rpdj4nLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgc2NvcGUuc2VwYXJhdG9yVmlzaWJsZSA9IHNjb3BlLnNlcGFyYXRvclZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICBzY29wZS5oZWFkZXJWaXNpYmxlID0gc2NvcGUuaGVhZGVyVmlzaWJsZSB8fCBmYWxzZTtcblxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLnNlcGFyYXRvci1pbnB1dCcpKS5vbigna2V5dXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBzY29wZS5jb250ZW50ICE9IG51bGwgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3N2OiBzY29wZS5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBzY29wZS5oZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2Rpbmc6IHNjb3BlLmVuY29kaW5nXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnJlc3VsdCA9IGNzdlRvSlNPTihjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKG9uQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBzY29wZS5maWxlbmFtZSA9IG9uQ2hhbmdlRXZlbnQudGFyZ2V0LmZpbGVzWzBdLm5hbWU7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKG9uTG9hZEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzdjogb25Mb2FkRXZlbnQudGFyZ2V0LnJlc3VsdC5yZXBsYWNlKC9cXHJcXG58XFxyL2csJ1xcbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcjogc2NvcGUuaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvcjogc2NvcGUuc2VwYXJhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuY29udGVudCA9IGNvbnRlbnQuY3N2O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUucmVzdWx0ID0gY3N2VG9KU09OKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUucmVzdWx0LmZpbGVuYW1lID0gc2NvcGUuZmlsZW5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoIChvbkNoYW5nZUV2ZW50LnRhcmdldC50eXBlID09PSBcImZpbGVcIikgJiYgKG9uQ2hhbmdlRXZlbnQudGFyZ2V0LmZpbGVzICE9IG51bGwgfHwgb25DaGFuZ2VFdmVudC5zcmNFbGVtZW50LmZpbGVzICE9IG51bGwpICkgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoKG9uQ2hhbmdlRXZlbnQuc3JjRWxlbWVudCB8fCBvbkNoYW5nZUV2ZW50LnRhcmdldCkuZmlsZXNbMF0sIHNjb3BlLmVuY29kaW5nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHNjb3BlLmNvbnRlbnQgIT0gbnVsbCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzdjogc2NvcGUuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI6ICFzY29wZS5oZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yOiBzY29wZS5zZXBhcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5yZXN1bHQgPSBjc3ZUb0pTT04oY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGNzdlRvSlNPTiA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGluZXM9Y29udGVudC5jc3Yuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBjb2x1bW5Db3VudCA9IGxpbmVzWzBdLnNwbGl0KGNvbnRlbnQuc2VwYXJhdG9yKS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50LmhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPWxpbmVzWzBdLnNwbGl0KGNvbnRlbnQuc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGk9c3RhcnQ7IGk8bGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudGxpbmU9bGluZXNbaV0uc3BsaXQobmV3IFJlZ0V4cChjb250ZW50LnNlcGFyYXRvcisnKD8hW15cIl0qXCIoPzooPzpbXlwiXSpcIil7Mn0pKlteXCJdKiQpJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnRsaW5lLmxlbmd0aCA9PT0gY29sdW1uQ291bnQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudC5oZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqPTA7IGo8aGVhZGVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbaGVhZGVyc1tqXV0gPSBjdXJyZW50bGluZVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGs9MDsgazxjdXJyZW50bGluZS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpba10gPSBjdXJyZW50bGluZVtrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvYmopO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfX0pOyIsImFwcC5jb250cm9sbGVyKCdkYXNoYm9hcmRDdHJsJywgWyckbWREaWFsb2cnLCAnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJGh0dHAnLCBmdW5jdGlvbigkbWREaWFsb2csICRyb290U2NvcGUsICRzY29wZSwgJGh0dHApIHtcbiAgICB2YXIgdXNlcj0kcm9vdFNjb3BlLnVzZXI7XG5cblxuICAgIC8vbG9hZCBwcm9qZWN0IGxpc3Qgb24gcGFnZSBsb2FkXG4gICAgJGh0dHAuZ2V0KCcvcHJvamVjdC8nICsgdXNlci5pZCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAkc2NvcGUucHJvamVjdExpc3QgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAvL3Jlc3BvbnNlLmRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgLy8gICAgaXRlbS5wcm9qZWN0X25hbWUgPSBpdGVtLnByaW1hcnlfY2F0LnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4vL3RoaXMgaXMgZm9yIHRoZSBkZWxldGUgbW9kYWwgYWxlcnQgZm9yIGRlbGV0aW5nIGEgcHJvamVjdC0tIHN0aWxsIG5vdCB3b3JraW5nIGNvcnJlY3RcblxuICAgICRzY29wZS5zaG93RGVsZXRlID0gZnVuY3Rpb24oZXYpIHtcblxuICAgICAgICBjb25zb2xlLmxvZygnQ0xJQ0snKTtcbiAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXG4gICAgICAgICAgICAudGl0bGUoJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgeW91ciBwcm9qZWN0PycpXG4gICAgICAgICAgICAuY29udGVudCgnVGhpcyBpcyBwZXJtYW5lbnQuJylcbiAgICAgICAgICAgIC5hcmlhTGFiZWwoJ0RlbGV0ZSBwcm9qZWN0IHBlcm1hbmVudGx5JylcbiAgICAgICAgICAgIC5vaygnRGVsZXRlJylcbiAgICAgICAgICAgIC5jYW5jZWwoJ0NhbmNlbCcpXG4gICAgICAgICAgICAudGFyZ2V0RXZlbnQoZXYpO1xuICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ1lvdXIgcHJvamVjdCBoYXMgYmVlbiBkZWxldGVkLic7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ1lvdXIgcHJvamVjdCBoYXMgbm90IGJlZW4gZGVsZXRlZC4nO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy9uZWVkIHRvIGNoZWNrIGlmIHdlIG5lZWQgdGhpcyFcbi8vICAgIGZ1bmN0aW9uIERpYWxvZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbWREaWFsb2cpIHtcbi8vICAgICRzY29wZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbi8vICAgIH07XG4vLyAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xuLy8gICAgfTtcbi8vICAgICRzY29wZS5hbnN3ZXIgPSBmdW5jdGlvbihhbnN3ZXIpIHtcbi8vICAgICAgICAkbWREaWFsb2cuaGlkZShhbnN3ZXIpO1xuLy8gICAgfTtcbi8vfVxuXG59XSk7IiwiLy8gTG9naW4gSFRNTCAtIEthdGVcbmFwcC5jb250cm9sbGVyKCdsb2dpbkN0cmwnLCBbJyRzY29wZScsICckaHR0cCcsICdhdXRoU2VydmljZScsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsIGF1dGhTZXJ2aWNlLCAkbG9jYXRpb24sICRyb290U2NvcGUpIHtcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJsOiAnL2xvZ2luJyxcbiAgICAgICAgICAgIGRhdGE6ICRzY29wZS5mb3JtXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgYXV0aFNlcnZpY2Uuc2F2ZVRva2VuKHJlc3BvbnNlLmRhdGEudG9rZW4pO1xuICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgfSlcbiAgICB9XG59XSk7IiwiLy8gQ2hhbmdlIE5hdmlnYXRpb24gT3B0aW9ucyB3aXRoIExvZ2luXG5hcHAuY29udHJvbGxlcignbmF2Q3RybCcsIFsnYXV0aFNlcnZpY2UnLCAnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgZnVuY3Rpb24oYXV0aFNlcnZpY2UsICRzY29wZSwgJHJvb3RTY29wZSwgJGxvY2F0aW9uLCAkaHR0cCl7XG4gICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xuXG4gICAgaWYoJHJvb3RTY29wZS51c2VyICYmICRyb290U2NvcGUudXNlci51c2VybmFtZSl7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgfVxufV0pO1xuIiwiLy8gUHJvamVjdCBQYWdlIC0gIEtpbS9NYWRlbGVpbmVcbmFwcC5jb250cm9sbGVyKCdwcm9qZWN0c0N0cmwnLCBbJyRtZERpYWxvZycsICckc2NvcGUnLCAnJHJvb3RTY29wZScsICckaHR0cCcsIGZ1bmN0aW9uKCRtZERpYWxvZywgJHNjb3BlLCAkcm9vdFNjb3BlLCAkaHR0cCkge1xuXG4gICAgLy8gU2VsZiBkZWNcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5wcm9qZWN0TGlzdCA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiAyMSxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdF9uYW1lOiBcImJlbidzIGhvdXNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfZGVzY3JpcHRpb246IFwiUmVtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkX2F0OiBcIjIwMTUtMTAtMTRUMTY6NDI6NDAuODk2WlwiLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX2F0OiBcIjIwMTUtMTAtMTRUMTY6NDI6NDAuOTAxWlwiLFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiA0LFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJ3b29kXCIsXG4gICAgICAgICAgICAgICAgICAgIHN1Yl9jYXRlZ29yeTogXCJvYWtcIixcbiAgICAgICAgICAgICAgICAgICAgdW5pdHM6IFwibGJzXCIsXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodDogMTAsXG4gICAgICAgICAgICAgICAgICAgIGNvMl9vZmZzZXQ6IDAuMDMsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IDYsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fZGVzY3JpcHRpb246IFwicG9yY2ggc3BpbmRsZXNcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZDogMjAyLFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0X25hbWU6IFwiamFtZXMnIGhvdXNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfZGVzY3JpcHRpb246IFwiVGVhcmRvd25cIixcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZF9hdDogXCIyMDE0LTEwLTE0VDE2OjQyOjQwLjg5NlpcIixcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9hdDogXCIyMDE0LTEwLTE0VDE2OjQyOjQwLjkwMVpcIixcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogMjQsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcImFzcGhhbHQgc2hpbmdsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgc3ViX2NhdGVnb3J5OiBcIm51bGxcIixcbiAgICAgICAgICAgICAgICAgICAgdW5pdHM6IFwibGJzXCIsXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodDogMTAwLFxuICAgICAgICAgICAgICAgICAgICBjbzJfb2Zmc2V0OiAwLjMwMyxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdF9pZDogNixcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9kZXNjcmlwdGlvbjogXCJyb29mIHNoaW5nbGVzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IDIxMTIsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfbmFtZTogXCJraW0ncyBiYXJuXCIsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfZGVzY3JpcHRpb246IFwiUmVtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkX2F0OiBcIjIwMTMtMTAtMTRUMTY6NDI6NDAuODk2WlwiLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX2F0OiBcIjIwMTMtMTAtMTRUMTY6NDI6NDAuOTAxWlwiLFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiAxNCxcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwid29vZCBmbG9vcmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBzdWJfY2F0ZWdvcnk6IFwicGluZVwiLFxuICAgICAgICAgICAgICAgICAgICB1bml0czogXCJsYnNcIixcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICAgICAgICAgIGNvMl9vZmZzZXQ6IDMuMDMsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IDYsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fZGVzY3JpcHRpb246IFwiYmFybiB3b29kXCJcbiAgICAgICAgICAgICAgICB9XTtcblxuICAgIHNlbGYucmVzdWx0ID0gJyc7XG4gICAgc2VsZi5xdWVyeVNlYXJjaCA9IHF1ZXJ5U2VhcmNoO1xuICAgIHNlbGYuc2VsZWN0ZWRJdGVtQ2hhbmdlID0gc2VsZWN0ZWRJdGVtQ2hhbmdlO1xuICAgIHNlbGYuc2VhcmNoVGV4dENoYW5nZSA9IHNlYXJjaFRleHRDaGFuZ2U7XG4gICAgc2VsZi5wcm9qZWN0VG90YWwgPSAwO1xuICAgIHNlbGYuZGVsZXRlUHJvamVjdEl0ZW0gPSBkZWxldGVQcm9qZWN0SXRlbTtcbiAgICBzZWxmLmlkID0gMDtcblxuY29uc29sZS5sb2coc2VsZi5wcm9qZWN0TGlzdCk7XG5cbiAgICAvL3JlZnJlc2ggcHJvamVjdCBsaXN0XG4gICAgLy9mdW5jdGlvbiBnZXRQcm9qZWN0TGlzdCgpIHtcbiAgICAvLyAgICAkaHR0cC5nZXQoJy9wcm9qZWN0JywgJHJvb3RTY29wZS51c2VyLmlkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIC8vICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgLy8gICAgICAgIGNvbnNvbGUubG9nKFwidXNlciBpZDogXCIsICRyb290U2NvcGUudXNlci5pZCk7XG4gICAgLy8gICAgICAgIHZhciBwcm9qZWN0TGlzdCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgLy8gICAgICAgIHByb2plY3RMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAvLyAgICAgICAgICAgIGl0ZW0ucHJvamVjdF9uYW1lID0gaXRlbS5wcm9qZWN0X25hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyAgICAgICAgICAgIC8vaXRlbS5wcm9qZWN0X2Rlc2NyaXB0aW9uID0gaXRlbS5wcm9qZWN0X2Rlc2NyaXB0aW9uO1xuICAgIC8vICAgICAgICAgICAgLy9pdGVtLml0ZW1JZCA9IGl0ZW0uaWQ7XG4gICAgLy8gICAgICAgICAgICAvL2l0ZW0uY28yX29mZnNldCA9IGl0ZW0uY28yX29mZnNldDtcbiAgICAvLyAgICAgICAgfSk7XG4gICAgLy8gICAgICAgIHNlbGYucHJvamVjdExpc3QgPSBwcm9qZWN0TGlzdDtcbiAgICAvLyAgICB9KTtcbiAgICAvL31cblxuICAgIC8vbG9hZCBwcm9qZWN0IGxpc3Qgb24gcGFnZSBsb2FkXG4gICAgLy9nZXRQcm9qZWN0TGlzdCgpO1xuXG4gICAgLy9mdW5jdGlvbiBnZXRQcm9qZWN0TGlzdCgpe1xuICAgIC8vICAgIGNvbnNvbGUubG9nKFwiUHJvamVjdCBsaXN0IGxvYWRlZDogXCIsIHNlbGYucHJvamVjdExpc3QpO1xuICAgIC8vICAgIHByb2plY3RMaXN0ID0gW1xuICAgIC8vICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICBpZDogMjEsXG4gICAgLy8gICAgICAgICAgICBwcm9qZWN0X25hbWU6IFwiQmVuJ3MgSG91c2VcIixcbiAgICAvLyAgICAgICAgICAgIHByb2plY3RfZGVzY3JpcHRpb246IFwiUmVtb2RlbFwiLFxuICAgIC8vICAgICAgICAgICAgY3JlYXRlZF9hdDogXCIyMDE1LTEwLTE0VDE2OjQyOjQwLjg5NlpcIixcbiAgICAvLyAgICAgICAgICAgIHVwZGF0ZWRfYXQ6IFwiMjAxNS0xMC0xNFQxNjo0Mjo0MC45MDFaXCIsXG4gICAgLy8gICAgICAgICAgICB1c2VyX2lkOiA0LFxuICAgIC8vICAgICAgICAgICAgY2F0ZWdvcnk6IFwid29vZFwiLFxuICAgIC8vICAgICAgICAgICAgc3ViX2NhdGVnb3J5OiBcIm9ha1wiLFxuICAgIC8vICAgICAgICAgICAgdW5pdHM6IFwibGJzXCIsXG4gICAgLy8gICAgICAgICAgICB3ZWlnaHQ6IDEwLFxuICAgIC8vICAgICAgICAgICAgY28yX29mZnNldDogMC4wMyxcbiAgICAvLyAgICAgICAgICAgIHByb2plY3RfaWQ6IDYsXG4gICAgLy8gICAgICAgICAgICBpdGVtX2Rlc2NyaXB0aW9uOiBcInBvcmNoIHNwaW5kbGVzXCJcbiAgICAvLyAgICAgICAgfSxcbiAgICAvLyAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgaWQ6IDIwMixcbiAgICAvLyAgICAgICAgICAgIHByb2plY3RfbmFtZTogXCJKYW1lcycgSG91c2VcIixcbiAgICAvLyAgICAgICAgICAgIHByb2plY3RfZGVzY3JpcHRpb246IFwiVGVhcmRvd25cIixcbiAgICAvLyAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IFwiMjAxNC0xMC0xNFQxNjo0Mjo0MC44OTZaXCIsXG4gICAgLy8gICAgICAgICAgICB1cGRhdGVkX2F0OiBcIjIwMTQtMTAtMTRUMTY6NDI6NDAuOTAxWlwiLFxuICAgIC8vICAgICAgICAgICAgdXNlcl9pZDogMjQsXG4gICAgLy8gICAgICAgICAgICBjYXRlZ29yeTogXCJhc3BoYWx0IHNoaW5nbGVzXCIsXG4gICAgLy8gICAgICAgICAgICBzdWJfY2F0ZWdvcnk6IFwibnVsbFwiLFxuICAgIC8vICAgICAgICAgICAgdW5pdHM6IFwibGJzXCIsXG4gICAgLy8gICAgICAgICAgICB3ZWlnaHQ6IDEwMCxcbiAgICAvLyAgICAgICAgICAgIGNvMl9vZmZzZXQ6IDAuMzAzLFxuICAgIC8vICAgICAgICAgICAgcHJvamVjdF9pZDogNixcbiAgICAvLyAgICAgICAgICAgIGl0ZW1fZGVzY3JpcHRpb246IFwicm9vZiBzaGluZ2xlc1wiXG4gICAgLy8gICAgICAgIH0sXG4gICAgLy8gICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgIGlkOiAyMTEyLFxuICAgIC8vICAgICAgICAgICAgcHJvamVjdF9uYW1lOiBcIktpbSdzIEJhcm5cIixcbiAgICAvLyAgICAgICAgICAgIHByb2plY3RfZGVzY3JpcHRpb246IFwiUmVtb2RlbFwiLFxuICAgIC8vICAgICAgICAgICAgY3JlYXRlZF9hdDogXCIyMDEzLTEwLTE0VDE2OjQyOjQwLjg5NlpcIixcbiAgICAvLyAgICAgICAgICAgIHVwZGF0ZWRfYXQ6IFwiMjAxMy0xMC0xNFQxNjo0Mjo0MC45MDFaXCIsXG4gICAgLy8gICAgICAgICAgICB1c2VyX2lkOiAxNCxcbiAgICAvLyAgICAgICAgICAgIGNhdGVnb3J5OiBcIndvb2QgZmxvb3JpbmdcIixcbiAgICAvLyAgICAgICAgICAgIHN1Yl9jYXRlZ29yeTogXCJwaW5lXCIsXG4gICAgLy8gICAgICAgICAgICB1bml0czogXCJsYnNcIixcbiAgICAvLyAgICAgICAgICAgIHdlaWdodDogNTAwLFxuICAgIC8vICAgICAgICAgICAgY28yX29mZnNldDogMy4wMyxcbiAgICAvLyAgICAgICAgICAgIHByb2plY3RfaWQ6IDYsXG4gICAgLy8gICAgICAgICAgICBpdGVtX2Rlc2NyaXB0aW9uOiBcImJhcm4gd29vZFwiXG4gICAgLy8gICAgICAgIH1cbiAgICAvLyAgICBdO1xuICAgIC8vfVxuXG5cblxuXG4gICAgZnVuY3Rpb24gcXVlcnlTZWFyY2gocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5ID8gc2VsZi5wcm9qZWN0TGlzdC5maWx0ZXIoY3JlYXRlRmlsdGVyRm9yKHF1ZXJ5KSkgOiBzZWxmLnByb2plY3RMaXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbHRlckZvcihxdWVyeSkge1xuICAgICAgICB2YXIgbG93ZXJjYXNlUXVlcnkgPSBxdWVyeS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAvL3F1ZXJ5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcXVlcnkuc2xpY2UoMSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBmaWx0ZXJGbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiAob2JqLnByb2plY3RfbmFtZS5pbmRleE9mKGxvd2VyY2FzZVF1ZXJ5KSAhPSAtMSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VhcmNoVGV4dENoYW5nZSh0ZXh0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdUZXh0IGNoYW5nZWQgdG8gJywgdGV4dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VsZWN0ZWRJdGVtQ2hhbmdlKGl0ZW0pIHtcbiAgICAgICAgaWYgKCBpdGVtID09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHNlbGYucHJvamVjdF9uYW1lID0gJyc7XG4gICAgICAgICAgICBzZWxmLnByb2plY3RfZGVzY3JpcHRpb24gPSAnJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgICRzY29wZS5zaG93RGVsZXRlID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NMSUNLJyk7XG4gICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxuICAgICAgICAgICAgLnRpdGxlKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgaXRlbT8nKVxuICAgICAgICAgICAgLmNvbnRlbnQoJ1RoaXMgd2lsbCBiZSBwZXJtYW5lbnQuJylcbiAgICAgICAgICAgIC5hcmlhTGFiZWwoJ0RlbGV0ZSBpdGVtIHBlcm1hbmVudGx5JylcbiAgICAgICAgICAgIC5vaygnRGVsZXRlJylcbiAgICAgICAgICAgIC5jYW5jZWwoJ0NhbmNlbCcpXG4gICAgICAgICAgICAudGFyZ2V0RXZlbnQoZXYpO1xuICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ1lvdXIgaXRlbSBoYXMgYmVlbiBkZWxldGVkLic7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmFsZXJ0ID0gJ1lvdXIgaXRlbSBoYXMgbm90IGJlZW4gZGVsZXRlZC4nO1xuICAgICAgICB9KTtcbiAgICB9O1xuLy8gICAgZnVuY3Rpb24gRGlhbG9nQ29udHJvbGxlcigkc2NvcGUsICRtZERpYWxvZykge1xuLy8gICAgJHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpIHtcbi8vICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuLy8gICAgfTtcbi8vICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbi8vICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XG4vLyAgICB9O1xuLy8gICAgJHNjb3BlLmFuc3dlciA9IGZ1bmN0aW9uKGFuc3dlcikge1xuLy8gICAgICAgICRtZERpYWxvZy5oaWRlKGFuc3dlcik7XG4vLyAgICB9O1xuLy99XG5cbiAgICBmdW5jdGlvbiBkZWxldGVQcm9qZWN0SXRlbSgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJEZWxldGluZy4uLlwiLCBzZWxmLnByb2plY3RfaWQpO1xuICAgICAgICAvLyRodHRwLnVwZGF0ZSgnL3Byb2plY3QnLCBzZWxmLmlkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAvL2ZpbmRPbmUgYW5kIGRlbGV0ZSBieSBpZCB1c2luZyBwcm9qZWN0bGlzdC5pZFxuICAgICAgICAvLyAgICBjb25zb2xlLmxvZyhcIkl0ZW0gd2FzIGRlbGV0ZWQuXCIsIHJlc3BvbnNlKTtcbiAgICAgICAgLy8gICAgc2VsZi5nZXRQcm9qZWN0TGlzdCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNhdmVQcm9qZWN0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNhdmluZy4uLlwiLCBzZWxmLmlkKTtcbiAgICAgICAgLy9zYXZlIGFsbCBwcm9qZWN0IGZpZWxkcz8gaG93IGRvIEkgZXZlbiBkbyB0aGlzP1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQcm9qZWN0VG90YWwoKSB7XG4gICAgICAgIHByb2plY3RMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHByb2plY3RUb3RhbCArPSBpdGVtLmNvMl9vZmZzZXQ7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0VG90YWwpO1xuICAgICAgICByZXR1cm4gcHJvamVjdFRvdGFsO1xuXG4gICAgfSlcbiAgICB9XG5cblxuXG59XSk7IiwiLy8gU2VydmljZXMgZm9yIGF1dGhlbnRpY2F0aW9uXG5hcHAuc2VydmljZSgnYXV0aFNlcnZpY2UnLCBbJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHdpbmRvdyl7XG4gICAgdGhpcy5wYXJzZUp3dCA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBiYXNlNjRVcmwgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJhc2U2NFVybC5yZXBsYWNlKCctJywgJysnKS5yZXBsYWNlKCdfJywgJy8nKTtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKCR3aW5kb3cuYXRvYihiYXNlNjQpKTtcbiAgICAgICAgfSBlbHNlIHJldHVybiB7fTtcbiAgICB9O1xuXG4gICAgdGhpcy5zYXZlVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4gPSB0b2tlbjtcbiAgICAgICAgY29uc29sZS5sb2coJ1NhdmVkIHRva2VuOicsJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4pO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XG4gICAgfTtcblxuICAgIHRoaXMuaXNBdXRoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJzZUp3dCh0b2tlbik7XG4gICAgICAgICAgICB2YXIgbm90RXhwaXJlZCA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSA8PSBwYXJhbXMuZXhwO1xuICAgICAgICAgICAgaWYgKCFub3RFeHBpcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub3RFeHBpcmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XG4gICAgfTtcblxuICAgIC8vIGV4cG9zZSB1c2VyIGFzIGFuIG9iamVjdFxuICAgIHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VKd3QodGhpcy5nZXRUb2tlbigpKVxuICAgIH07XG59XSk7XG5cbmFwcC5mYWN0b3J5KCdhdXRoSW50ZXJjZXB0b3InLCBbJyRxJywgJyRsb2NhdGlvbicsICdhdXRoU2VydmljZScsIGZ1bmN0aW9uICgkcSwgJGxvY2F0aW9uLCBhdXRoU2VydmljZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG4gICAgICAgICAgICBpZiAoYXV0aFNlcnZpY2UuaXNBdXRoZWQoKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmVhcmVyICcgKyBhdXRoU2VydmljZS5nZXRUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgdXNlciBpcyBub3QgYXV0aGVudGljYXRlZFxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2xvZ2luXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8ICRxLndoZW4ocmVzcG9uc2UpO1xuICAgICAgICB9LCByZXNwb25zZUVycm9yOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2xvZ2luXCIpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
