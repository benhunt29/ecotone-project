var app=angular.module("ecotoneApp",["ngRoute","ngMaterial","ngMessages","validation.match"]);app.config(["$mdThemingProvider","$routeProvider","$locationProvider","$httpProvider",function(e,t,o,n){o.html5Mode(!0),e.theme("default").primaryPalette("green").accentPalette("blue-grey",{"default":"600"}).warnPalette("orange"),t.when("/",{templateUrl:"/views/calculator.html",controller:"calculateCtrl as ctrl"}).when("/login",{templateUrl:"/views/login.html",controller:"loginCtrl"}).when("/register",{templateUrl:"/views/register.html",controller:"createAccountCtrl"}).when("/admin",{templateUrl:"/views/admin.html",controller:"adminCtrl as ctrl"}).when("/account",{templateUrl:"/views/account.html",controller:""}).when("/dashboard",{templateUrl:"/views/dashboard.html",controller:"dashboardCtrl"}).when("/projects",{templateUrl:"/views/project.html",controller:"projectsCtrl as ctrl"}).when("/sources",{templateUrl:"/views/sources.html"}).otherwise({redirectTo:"/"}),n.interceptors.push("authInterceptor")}]),app.controller("editAccountCtrl",["$scope","$http","$location","$rootScope",function(e,t,o,n){e.user={},console.log(n.user),e.user=n.user;e.updateUserInfo=function(){console.log("Posting..."),t({method:"PUT",url:"/modifyUser",data:e.user,dataType:"json"}).then(function(e){console.log(e),o.path("/calculator"),alert("Your account information has been changed.")},function(e){console.log("error"),alert("There was a problem processing your changes. Please try again later.")})}}]),app.controller("adminCtrl",["$http","$scope","$parse",function(e,t,o){function n(){var o=t.csv.result;console.log(o),e.post("/bulk",o).then(function(e){return console.log(e),e.data.forEach(function(e){e.project_id=3}),e.data}).then(function(t){e.post("/project/calculation/",t)})["catch"](function(e){console.log(e)})}function r(t){var o=t.id;console.log(o),e.put("/suggestion/complete/"+o).then(function(e){a()})}function a(){e.get("/suggestion").then(function(e){var t=e.data;console.log(t),l.suggestions=t})}a();var l=this;l.suggestions="",l.markComplete=r,l.submitCSV=n,t.csv={content:null,header:!0,headerVisible:!0,separator:",",separatorVisible:!0,result:null,encoding:"ISO-8859-1",encodingVisible:!0};var i="";t.toPrettyJSON=function(e,t){var n=JSON.stringify(e),r=null;try{r=o(n)({})}catch(a){return i}var l=JSON.stringify(r,null,Number(t));return i=l,l}}]),app.controller("calculateCtrl",["$http","$mdDialog","$rootScope","authService","$location",function(e,t,o,n,r){function a(e){console.log("Text changed to ",e)}function l(e){void 0==e&&(f.category="",f.subcategory="",f.warmId="",f.weight="",f.item_description="",f.conversion="",f.result="")}function i(){var t={warmId:f.warmId||f.category.secondaries[0].warm_id,weight:parseFloat(f.weight)*f.conversion};e.post("/calculations",t).then(function(e){f.result=Math.floor(1e3*Math.abs(e.data))/1e3})}function c(){var t={category:f.category,subcategory:f.subcategory,warm_Id:f.warmId,weight:parseFloat(f.weight)*f.conversion,units:f.unit.name,item_description:f.item_description};console.log(t),e.post("/addToProject").then(function(e){console.log(e)})}function s(e){return e?f.list.filter(u(e)):f.list}function u(e){var t=e.toLowerCase();return function(e){return-1!=e.primary_cat.indexOf(t)}}function p(){e.post("/suggestion",f.suggestSubmission).then(function(e){t.hide()})}function h(e){t.show({templateUrl:"/views/suggest-modal.html",clickOutsideToClose:!0,controller:"calculateCtrl",controllerAs:"ctrl",locals:{material:f.searchText}})}function d(){f.projectSubmission.user_id=o.user.id,e.post("/project",f.projectSubmission).then(function(e){t.hide()})}function g(e){t.show({templateUrl:"views/project-modal.html",clickOutsideToClose:!0,controller:"calculateCtrl",controllerAs:"ctrl"})}o.user=n.getUser(),o.user&&o.user.username&&r.path("/"),e.get("/materials").then(function(e){var t=e.data;t.forEach(function(e){e.primary_cat=e.primary_cat.toLowerCase()}),f.list=t});var f=this;f.list="",f.isDisabled=!1,f.result="",f.querySearch=s,f.selectedItemChange=l,f.searchTextChange=a,f.newSuggestion=h,f.submitSuggestion=p,f.units=[{name:"lbs",conversion:5e-4},{name:"kilos",conversion:.00110231},{name:"tons",conversion:1},{name:"metric tons",conversion:1.10231}],f.submission={email:"",material:"",notes:""},f.newCalculation=i,f.saveToProject=c,f.newProject=g,f.createProject=d}]),app.controller("createAccountCtrl",["$scope","$http","$location",function(e,t,o){e.user={},e.processForm=function(n){console.log("Posting..."),t({method:"POST",url:"/register",data:e.user,dataType:"json"}).then(function(e){console.log(e),o.path("/login"),alert("Your account has been created.")})}}]),app.directive("ngCsvImport",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{content:"=?",header:"=?",headerVisible:"=?",separator:"=?",separatorVisible:"=?",result:"=?",encoding:"=?",encodingVisible:"=?"},template:'<div><div ng-show="headerVisible"><div class="label">Header</div><input type="checkbox" ng-model="header"></div><div ng-show="encoding && encodingVisible"><div class="label">Encoding</div><span>{{encoding}}</span></div><div ng-show="separator && separatorVisible"><div class="label">Seperator</div><span><input class="separator-input" type="text" ng-change="changeSeparator" ng-model="separator"><span></div><div><input class="btn cta gray" type="file"/></div></div>',link:function(e,t){e.separatorVisible=e.separatorVisible||!1,e.headerVisible=e.headerVisible||!1,angular.element(t[0].querySelector(".separator-input")).on("keyup",function(t){if(null!=e.content){var n={csv:e.content,header:e.header,separator:t.target.value,encoding:e.encoding};e.result=o(n),e.$apply()}}),t.on("change",function(t){var n=new FileReader;if(e.filename=t.target.files[0].name,n.onload=function(t){e.$apply(function(){var n={csv:t.target.result.replace(/\r\n|\r/g,"\n"),header:e.header,separator:e.separator};e.content=n.csv,e.result=o(n),e.result.filename=e.filename})},"file"!==t.target.type||null==t.target.files&&null==t.srcElement.files){if(null!=e.content){var r={csv:e.content,header:!e.header,separator:e.separator};e.result=o(r)}}else n.readAsText((t.srcElement||t.target).files[0],e.encoding)});var o=function(e){var t=e.csv.split("\n"),o=[],n=0,r=t[0].split(e.separator).length,a=[];e.header&&(a=t[0].split(e.separator),n=1);for(var l=n;l<t.length;l++){var i={},c=t[l].split(new RegExp(e.separator+'(?![^"]*"(?:(?:[^"]*"){2})*[^"]*$)'));if(c.length===r){if(e.header)for(var s=0;s<a.length;s++)i[a[s]]=c[s];else for(var u=0;u<c.length;u++)i[u]=c[u];o.push(i)}}return o}}}}),app.controller("dashboardCtrl",["$mdDialog","$rootScope","$scope","$http",function(e,t,o,n){var r=t.user;n.get("/project/"+r.id).then(function(e){o.projectList=e.data}),o.showDelete=function(t){console.log("CLICK");var n=e.confirm().title("Are you sure you want to remove your project?").content("This is permanent.").ariaLabel("Remove project from account permanently").ok("Delete").cancel("Cancel").targetEvent(t);e.show(n).then(function(){o.alert="Your project has been removed."},function(){o.alert="Your project has not been removed."})}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(e,t,o,n,r){e.login=function(){t({method:"POST",url:"/login",data:e.form}).then(function(e){o.saveToken(e.data.token),r.user=o.getUser(),n.path("/")})}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location","$http",function(e,t,o,n,r){o.user=e.getUser(),o.user&&o.user.username&&n.path("/"),t.logout=function(){e.logout(),o.user=e.getUser(),n.path("/")}}]),app.controller("projectsCtrl",["$mdDialog","$scope","$rootScope","$http",function(e,t,o,n){function r(){n.get("/project/?user_id="+o.user.id).then(function(e){console.log(e);var t=[];e.data[0].project_name;e.data.forEach(function(e){}),console.log(t)})}function a(e){return e?u.projectList.filter(l(e)):u.projectList}function l(e){var t=e.toLowerCase();return function(e){return-1!=e.project_name.indexOf(t)}}function i(e){console.log("Text changed to ",e)}function c(e){console.log("item",e),console.log("selected_ project",u.selected_project),void 0==e&&(u.selected_project="",u.project_description="")}function s(e){console.log("Deleting...",e)}var u=this;u.projectList="",u.result="",u.querySearch=a,u.selectedItemChange=c,u.searchTextChange=i,u.projectTotal=0,u.deleteProjectItem=s,u.id=0,r(),t.showDelete=function(o,n){console.log("CLICK");var r=e.confirm().title("Are you sure you want to delete this item?").content("This will be permanent.").ariaLabel("Delete item permanently").ok("Delete").cancel("Cancel").targetEvent(o);e.show(r).then(function(){console.log("Deleting",n),u.deleteProjectItem(n),t.alert="Your item has been deleted."},function(){t.alert="Your item has not been deleted."})}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var o=t.split(".")[1],n=o.replace("-","+").replace("_","/");return JSON.parse(e.atob(n))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t,console.log("Saved token:",e.localStorage.jwtToken)},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),o=Math.round((new Date).getTime()/1e3)<=t.exp;return o||this.logout(),o}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,o){return{request:function(e){return e.headers=e.headers||{},o.isAuthed()&&(e.headers.Authorization="Bearer "+o.getToken()),e},response:function(o){return 401===o.status&&t.path("/login"),o||e.when(o)},responseError:function(o){return 401===o.status?t.path("/login"):console.log(o),e.reject(o)}}}]);
//# sourceMappingURL=data:application/json;base64,
