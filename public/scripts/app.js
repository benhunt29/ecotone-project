var app=angular.module("ecotoneApp",["ngRoute","ngMaterial","ngMessages","validation.match"]);app.config(["$mdThemingProvider","$routeProvider","$locationProvider","$httpProvider",function(e,t,o,r){o.html5Mode(!0),e.theme("default").primaryPalette("green").accentPalette("blue-grey",{"default":"600"}).warnPalette("orange"),t.when("/",{templateUrl:"/views/calculator.html",controller:"calculateCtrl as ctrl"}).when("/login",{templateUrl:"/views/login.html",controller:"loginCtrl"}).when("/register",{templateUrl:"/views/register.html",controller:"createAccountCtrl"}).when("/admin",{templateUrl:"/views/admin.html",controller:"adminCtrl as ctrl"}).when("/account",{templateUrl:"/views/account.html",controller:""}).when("/dashboard",{templateUrl:"/views/dashboard.html",controller:"dashboardCtrl"}).when("/projects",{templateUrl:"/views/project.html",controller:"projectsCtrl as ctrl"}).when("/sources",{templateUrl:"/views/sources.html"}).otherwise({redirectTo:"/"}),r.interceptors.push("authInterceptor")}]),app.controller("editAccountCtrl",["$scope","$http","$location","$rootScope","$mdToast",function(e,t,o,r,n){e.user={},console.log(r.user),e.user=r.user,e.updateUserInfo=function(){console.log("Posting..."),t({method:"PUT",url:"/modifyUser",data:e.user,dataType:"json"}).then(function(e){console.log(e),o.path("/calculator"),alert("Your account information has been changed.")},function(t){console.log("error"),e.errorToast("There was a problem processing your changes. Please try again later.")})},e.errorToast=function(e){n.show(n.simple().content(e).hideDelay(3e3))}}]),app.controller("adminCtrl",["$http","$scope","$parse",function(e,t,o){function r(){var o=t.csv.result;console.log(o),e.post("/bulk",o).then(function(e){return console.log(e),e.data.forEach(function(e){e.project_id=1}),e.data}).then(function(t){e.post("/project/calculation/",t)})["catch"](function(e){console.log(e)})}function n(t){var o=t.id;console.log(o),e.put("/suggestion/complete/"+o).then(function(e){a()})}function a(){e.get("/suggestion").then(function(e){var t=e.data;console.log(t),i.suggestions=t})}a();var i=this;i.suggestions="",i.markComplete=n,i.submitCSV=r,t.csv={content:null,header:!0,headerVisible:!0,separator:",",separatorVisible:!0,result:null,encoding:"ISO-8859-1",encodingVisible:!0};var s="";t.toPrettyJSON=function(e,t){var r=JSON.stringify(e),n=null;try{n=o(r)({})}catch(a){return s}var i=JSON.stringify(n,null,Number(t));return s=i,i}}]),app.controller("calculateCtrl",["$http","$mdDialog","$rootScope","authService","$location",function(e,t,o,r,n){function a(e){console.log("Text changed to ",e)}function i(e){void 0==e&&(m.category="",m.subcategory="",m.warmId="",m.weight="",m.item_description="",m.conversion="",m.result="")}function s(){var t={warmId:m.warmId||m.category.secondaries[0].warm_id,weight:parseFloat(m.weight)*m.conversion};e.post("/calculations",t).then(function(e){e.data=Math.abs(parseFloat(e.data)),e.data>=1e-4?m.result=Math.floor(1e4*e.data)/1e4:m.result=e.data.toExponential(2)})}function c(){var t={category:m.category,subcategory:m.subcategory,warm_Id:m.warmId,weight:parseFloat(m.weight)*m.conversion,units:m.unit.name,item_description:m.item_description};console.log(t),e.post("/addToProject").then(function(e){console.log(e)})}function l(e){return e?m.list.filter(u(e)):m.list}function u(e){var t=e.toLowerCase();return function(e){return-1!=e.primary_cat.indexOf(t)}}function p(){e.post("/suggestion",m.suggestSubmission).then(function(e){t.hide()})}function d(e){t.show({templateUrl:"/views/suggest-modal.html",clickOutsideToClose:!0,controller:"calculateCtrl",controllerAs:"ctrl",locals:{material:m.searchText}})}function h(){e.post("/project",m.projectSubmission).then(function(e){t.hide()})}function g(e){t.show({templateUrl:"views/project-modal.html",clickOutsideToClose:!0,controller:"calculateCtrl",controllerAs:"ctrl"})}o.user=r.getUser(),o.user&&o.user.username&&n.path("/"),e.get("/materials").then(function(e){var t=e.data;t.forEach(function(e){e.primary_cat=e.primary_cat.toLowerCase()}),m.list=t});var m=this;m.list="",m.isDisabled=!1,m.result="",m.querySearch=l,m.selectedItemChange=i,m.searchTextChange=a,m.newSuggestion=d,m.submitSuggestion=p,m.units=[{name:"lbs",conversion:5e-4},{name:"kilos",conversion:.00110231},{name:"tons",conversion:1},{name:"metric tons",conversion:1.10231}],m.submission={email:"",material:"",notes:""},m.newCalculation=s,m.saveToProject=c,m.newProject=g,m.createProject=h}]),app.controller("createAccountCtrl",["$scope","$http","$location","showToast",function(e,t,o,r){e.user={},e.processForm=function(n){t({method:"POST",url:"/register",data:e.user,dataType:"json"}).then(function(e){console.log(e),o.path("/login"),r.showToast("Your account has been created.")},function(e){console.log(e),r.showToast(e.data.message)})}}]),app.directive("ngCsvImport",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{content:"=?",header:"=?",headerVisible:"=?",separator:"=?",separatorVisible:"=?",result:"=?",encoding:"=?",encodingVisible:"=?"},template:'<div><div ng-show="headerVisible"><div class="label">Header</div><input type="checkbox" ng-model="header"></div><div ng-show="encoding && encodingVisible"><div class="label">Encoding</div><span>{{encoding}}</span></div><div ng-show="separator && separatorVisible"><div class="label">Seperator</div><span><input class="separator-input" type="text" ng-change="changeSeparator" ng-model="separator"><span></div><div><input class="btn cta gray" type="file"/></div></div>',link:function(e,t){e.separatorVisible=e.separatorVisible||!1,e.headerVisible=e.headerVisible||!1,angular.element(t[0].querySelector(".separator-input")).on("keyup",function(t){if(null!=e.content){var r={csv:e.content,header:e.header,separator:t.target.value,encoding:e.encoding};e.result=o(r),e.$apply()}}),t.on("change",function(t){var r=new FileReader;if(e.filename=t.target.files[0].name,r.onload=function(t){e.$apply(function(){var r={csv:t.target.result.replace(/\r\n|\r/g,"\n"),header:e.header,separator:e.separator};e.content=r.csv,e.result=o(r),e.result.filename=e.filename})},"file"!==t.target.type||null==t.target.files&&null==t.srcElement.files){if(null!=e.content){var n={csv:e.content,header:!e.header,separator:e.separator};e.result=o(n)}}else r.readAsText((t.srcElement||t.target).files[0],e.encoding)});var o=function(e){var t=e.csv.split("\n"),o=[],r=0,n=t[0].split(e.separator).length,a=[];e.header&&(a=t[0].split(e.separator),r=1);for(var i=r;i<t.length;i++){var s={},c=t[i].split(new RegExp(e.separator+'(?![^"]*"(?:(?:[^"]*"){2})*[^"]*$)'));if(c.length===n){if(e.header)for(var l=0;l<a.length;l++)s[a[l]]=c[l];else for(var u=0;u<c.length;u++)s[u]=c[u];o.push(s)}}return o}}}}),app.controller("dashboardCtrl",["$mdDialog","$rootScope","$scope","$http",function(e,t,o,r){var n=t.user;r.get("/project/"+n.id).then(function(e){o.projectList=e.data}),o.showDelete=function(t){console.log("CLICK");var r=e.confirm().title("Are you sure you want to remove your project?").content("This is permanent.").ariaLabel("Remove project from account permanently").ok("Delete").cancel("Cancel").targetEvent(t);e.show(r).then(function(){o.alert="Your project has been removed."},function(){o.alert="Your project has not been removed."})}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope","showToast",function(e,t,o,r,n,a){e.login=function(){t({method:"POST",url:"/login",data:e.form}).then(function(e){o.saveToken(e.data.token),n.user=o.getUser(),r.path("/")},function(e){a.showToast(e.data.message)})}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location","$http",function(e,t,o,r,n){o.user=e.getUser(),o.user&&o.user.username&&r.path("/"),t.logout=function(){e.logout(),o.user=e.getUser(),r.path("/")}}]),app.controller("projectsCtrl",["$mdDialog","$scope","$rootScope","$http",function(e,t,o,r){function n(e){return e?l.projectList.filter(a(e)):l.projectList}function a(e){var t=e.toLowerCase();return function(e){return-1!=e.project_name.indexOf(t)}}function i(e){console.log("Text changed to ",e)}function s(e){console.log("item",e),console.log("selected_ project",l.selected_project),void 0==e&&(l.selected_project="",l.project_description="")}function c(e){console.log("Deleting...",e)}var l=this;l.projectList=[{id:21,project_name:"ben's house",project_description:"Remodel",created_at:"2015-10-14T16:42:40.896Z",updated_at:"2015-10-14T16:42:40.901Z",user_id:4,category:"wood",sub_category:"oak",units:"lbs",weight:10,co2_offset:.03,project_id:6,item_description:"porch spindles"},{id:202,project_name:"james' house",project_description:"Summit Ave carriage house teardown and rebuild",created_at:"2014-10-14T16:42:40.896Z",updated_at:"2014-10-14T16:42:40.901Z",user_id:24,category:"asphalt shingles",sub_category:"null",units:"lbs",weight:100,co2_offset:.303,project_id:6,item_description:"dark brown roof shingles--30 year life, some water damage"},{id:2112,project_name:"kim's barn",project_description:"Remodel",created_at:"2013-10-14T16:42:40.896Z",updated_at:"2013-10-14T16:42:40.901Z",user_id:14,category:"wood flooring",sub_category:"pine",units:"lbs",weight:500,co2_offset:3.03,project_id:6,item_description:"barn wood"}],l.result="",l.querySearch=n,l.selectedItemChange=s,l.searchTextChange=i,l.projectTotal=0,l.deleteProjectItem=c,l.id=0,console.log(l.projectList),t.showDelete=function(o,r){console.log("CLICK");var n=e.confirm().title("Are you sure you want to delete this item?").content("This will be permanent.").ariaLabel("Delete item permanently").ok("Delete").cancel("Cancel").targetEvent(o);e.show(n).then(function(){console.log("Deleting",r),l.deleteProjectItem(r),t.alert="Your item has been deleted."},function(){t.alert="Your item has not been deleted."})}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var o=t.split(".")[1],r=o.replace("-","+").replace("_","/");return JSON.parse(e.atob(r))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),o=Math.round((new Date).getTime()/1e3)<=t.exp;return o||this.logout(),o}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,o){return{request:function(e){return e.headers=e.headers||{},o.isAuthed()&&(e.headers.Authorization="Bearer "+o.getToken()),e},response:function(o){return 401===o.status&&t.path("/login"),o||e.when(o)},responseError:function(o){return 401===o.status?t.path("/login"):console.log(o),e.reject(o)}}}]),app.service("showToast",["$mdToast",function(e){this.showToast=function(t){e.show(e.simple().content(t).hideDelay(3e3).position("top right"))}}]);
//# sourceMappingURL=data:application/json;base64,
