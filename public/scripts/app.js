var app=angular.module("ecotoneApp",["ngRoute","ngMaterial","ngMessages"]);app.config(["$mdThemingProvider","$routeProvider","$locationProvider","$httpProvider",function(t,e,r,o){r.html5Mode(!0),t.theme("default").primaryPalette("green").accentPalette("blue").warnPalette("orange"),e.when("/",{templateUrl:"/views/calculator.html",controller:"calculateCtrl"}).when("/login",{templateUrl:"/views/login.html",controller:""}).when("/register",{templateUrl:"/views/register.html",controller:"createAccountCtrl"}).when("/account",{templateUrl:"/views/account.html",controller:""}).when("/dashboard",{templateUrl:"/views/dashboard.html",controller:"projectsCtrl"}).when("/projects",{templateUrl:"/views/project.html",controller:"projectsCtrl"}).when("/about",{templateUrl:"/views/about.html"}).when("/contact",{templateUrl:"/views/contact.html",controller:""}).when("/privacy",{templateUrl:"/views/privacy.html"}).otherwise({redirectTo:"/"})}]),app.controller("calculateCtrl",["$scope","$http",function(t,e){function r(t){var e=angular.lowercase(t);return function(t){return-1!=t.primary_cat.indexOf(e)}}t.newCalculation=function(){console.log(t.selected)},t.querySearch=function(e){return console.log(t.list.filter(r(e))),e?t.list.filter(r(e)):t.list},e.get("/materials").then(function(e){console.log(e),t.list=e.data,e.data.forEach(function(t){t.primary_cat=t.primary_cat.toLowerCase()})}),t.unit=["lbs","kilos","tons","metric tons"]}]),app.controller("createAccountCtrl",["$scope","$http",function(t,e){t.user={},t.processForm=function(r){console.log("Posting..."),e({method:"POST",url:"/newUser",data:t.user,dataType:"json"}).then(function(t){console.log(t),alert("Your account has been created.")})}}]),app.controller("projectsCtrl",["$scope","$http",function(t,e){e({method:"POST",url:"http://www.w3schools.com/angular/customers.php"}).then(function(e){t.names=e.records}),e({method:"GET",url:"http://www.w3schools.com/angular/customers.php"}).then(function(e){t.names=e.records})}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var r=e.split(".")[1],o=r.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e,console.log("Saved token:",t.localStorage.jwtToken)},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),r=Math.round((new Date).getTime()/1e3)<=e.exp;return r||this.logout(),r}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,r){return{request:function(t){return t.headers=t.headers||{},r.isAuthed()&&(t.headers.Authorization="Bearer "+r.getToken()),t},response:function(r){return 401===r.status&&e.path("/login"),r||t.when(r)},responseError:function(r){return 401===r.status?e.path("/login"):console.log(r),t.reject(r)}}}]);
//# sourceMappingURL=data:application/json;base64,
